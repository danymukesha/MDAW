[{"path":"https://danymukesha.github.io/MDAW/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 Dany Mukesha Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://danymukesha.github.io/MDAW/articles/Introduction.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Introduction to MDAW","text":"accurate analysis interpretation complex data sets utmost importance order obtain meaningful biological insights. address issue, robust computational workflow statistical analysis untargeted targeted metabolomics data developed. workflow ensures reliability results, also promotes reproducibility data analysis reporting - fundamental principle scientific integrity (Resnik DB. et al., 2016). manuscript provides designed computational workflow developed analysis metabolomics data binary classification studies. approach encompasses range techniques, including univariate multivariate statistical analyses, quality control procedures, visualization tools, aimed deciphering complex metabolic signatures underlying biological phenomena. providing structured framework leveraging state---art methods enhances robustness data analysis metabolomics.","code":""},{"path":"https://danymukesha.github.io/MDAW/articles/Introduction.html","id":"outlines","dir":"Articles","previous_headings":"","what":"Outlines","title":"Introduction to MDAW","text":"outlines MDAW, workflow analyzing metabolomics data, binary classification study. Let’s see together breakdown steps consists workflow: Importing Data: Start importing metabolite experimental data Excel sheet. step ensures needed information analysis. Pooled QC-based Data Cleaning: Quality control (QC) important metabolomics make sure data obtained reliable. Pooled QC samples helps identify remove technical variation artifacts data. Principal Component Analysis (PCA) Visualization: PCA powerful tool assessing data quality, identifying outliers, gaining insights overall structure data. Visualizing data using PCA plots help us detect clustering separation sample groups. Two-Class Univariate Statistics: Perform uni-variate statistical analysis identify individual metabolites show significant differences two classes (e.g., control vs. treatment). analysis can involve statistical tests t-tests ANOVA, followed correction multiple comparisons needed. Multivariate Analysis PLS-DA: Model Optimization (R2 vs. Q2): Optimize PLS-DA model assessing goodness fit (R2) predictive ability (Q2) using cross-validation techniques. Permutation Testing: Validate PLS-DA model permutation testing assess statistical significance guard overfitting. Model Prediction Metrics: Evaluate performance PLS-DA model using metrics accuracy, sensitivity, specificity, area receiver operating characteristic curve (AUC-ROC). Feature Importance: Identify important metabolites contributing classification examining variable importance projection (VIP) scores loading plots. Model Prediction Data Visualizations: Visualize results PLS-DA model, score plots class prediction plots, assess separation sample groups model’s predictive ability. Exporting Statistical Tables: Export relevant statistical tables summarizing results univariate multivariate analyses Excel sheets examination reporting. workflow provide well streamlined computational approach analyzing metabolomics data binary classification study, integrating univariate multivariate statistical methods identify biomarkers gain insights biological differences sample groups.","code":""},{"path":[]},{"path":"https://danymukesha.github.io/MDAW/articles/Introduction.html","id":"libraries","dir":"Articles","previous_headings":"Case Study","what":"Libraries","title":"Introduction to MDAW","text":"Libraries(Packages) provide functions extend basic functionality R language. need following tools analyse data:","code":"library(MDAW) library(dplyr) library(ggplot2) library(reactable) library(sessioninfo)"},{"path":"https://danymukesha.github.io/MDAW/articles/Introduction.html","id":"import-datapeak","dir":"Articles","previous_headings":"Case Study","what":"Import data/peak","title":"Introduction to MDAW","text":"chunk code utilises function called MDAW::import_dataXL() import Peak Data sheets Excel file. done, notification appears confirm Peak Data tables loaded corresponding worksheets Excel file.","code":"# Theinput file (Excel spreadsheet) excel_file <- \"Gastric_NMR.xlsx\"  # The path to the input file (Excel spreadsheet) path <- system.file(\"extdata\", \"Gastric_NMR.xlsx\", package = \"MDAW\")  # The table of Data from an Excel file(data sheet) table_data <- MDAW::import_dataXL(xlsx_file_name = path, sheet_name = \"Data\",                                    interactive_output = FALSE) #> Loading sheet: Data  #> TOTAL ROWS: 140  #> Done!  # The table of Peak from an Excel file(peak sheet) table_peak <- MDAW::import_dataXL(xlsx_file_name = path, sheet_name = \"Peak\") #> Loading sheet: Peak  #> TOTAL ROWS: 149  #> Done!"},{"path":"https://danymukesha.github.io/MDAW/articles/Introduction.html","id":"load-table-of-data","dir":"Articles","previous_headings":"Case Study","what":"Load table of data","title":"Introduction to MDAW","text":"data table offers interactive display feature, allowing easily inspect verify imported values. functionality can accessed utilizing reactable::reactable() function.","code":"table_data  # View and check the table data  #> # A tibble: 140 × 154 #>    RowID   Idx SampleID  SampleType Class    M1      M2    M3    M4    M5    M6 #>    <chr> <dbl> <chr>     <chr>      <chr> <dbl>   <dbl> <dbl> <dbl> <dbl> <dbl> #>  1 1         1 sample_1  QC         QC     90.1   492.  203.   35   164.   19.7 #>  2 2         2 sample_2  Sample     GC     43     526.  130.   NA   694.  114.  #>  3 3         3 sample_3  Sample     BN    214.  10703.  105.   46.8 483.  152.  #>  4 4         4 sample_4  Sample     HE     31.6    59.7  86.4  14    88.6  10.3 #>  5 5         5 sample_5  Sample     GC     81.9   259.  315.    8.7 243.   18.4 #>  6 6         6 sample_6  Sample     BN    197.    128.  862.   18.7 200.    4.7 #>  7 7         7 sample_7  Sample     GC     45.5   190.   32    NA   363.   35.7 #>  8 8         8 sample_8  Sample     HE     91     232.  212.   18.2  72.5   6.7 #>  9 9         9 sample_9  Sample     GC    481.    470.   60.7   8.4 270.   57.4 #> 10 10       10 sample_10 QC         QC     62.2   182.   75.5  36   203.   18.7 #> # ℹ 130 more rows #> # ℹ 143 more variables: M7 <dbl>, M8 <dbl>, M9 <dbl>, M10 <dbl>, M11 <dbl>, #> #   M12 <dbl>, M13 <dbl>, M14 <dbl>, M15 <dbl>, M16 <dbl>, M17 <dbl>, #> #   M18 <dbl>, M19 <dbl>, M20 <dbl>, M21 <dbl>, M22 <dbl>, M23 <dbl>, #> #   M24 <dbl>, M25 <dbl>, M26 <dbl>, M27 <dbl>, M28 <dbl>, M29 <dbl>, #> #   M30 <dbl>, M31 <dbl>, M32 <dbl>, M33 <dbl>, M34 <dbl>, M35 <dbl>, #> #   M36 <dbl>, M37 <dbl>, M38 <dbl>, M39 <dbl>, M40 <dbl>, M41 <dbl>, …"},{"path":"https://danymukesha.github.io/MDAW/articles/Introduction.html","id":"load-table-of-peaks","dir":"Articles","previous_headings":"Case Study","what":"Load table of peaks","title":"Introduction to MDAW","text":"peak table offers interactive display feature, allowing easily inspect verify imported values.","code":"table_peak |>   reactable::reactable() # View and check the table peak"},{"path":"https://danymukesha.github.io/MDAW/articles/Introduction.html","id":"data-cleansing","dir":"Articles","previous_headings":"Case Study","what":"Data Cleansing","title":"Introduction to MDAW","text":"beginning statistical machine learning modeling, important assess quality data eliminate inaccurately measured metabolites. process ensures integrity analytics. demonstration using gastric cancer NMR data set, basic statistical measure metabolite already calculated, stored MDAW::table_peak. file, metabolites stored compliance following conditions: QC-RSD (Relative Standard Deviation) 20%. Fewer 10% values absent.","code":"# filter clean metabolite from table_peak clean_table_peak <- MDAW::clean_table_peak(table = table_peak,                          min_QC_RSD = 20,                          min_Perc_missing = 20) #> 52 remaining peaks."},{"path":"https://danymukesha.github.io/MDAW/articles/Introduction.html","id":"pca-principal-component-analysis","dir":"Articles","previous_headings":"Case Study","what":"PCA (Principal Component Analysis)","title":"Introduction to MDAW","text":"effectively evaluate quality cleaned dataset comprehensive manner, advisable conduct basic Principal Component Analysis (PCA) following appropriate transformation scaling procedures. PCA score plot typically categorizes samples type, quality control (QC) biological sample (Sample). datasets high quality, QC samples tend cluster closely together compared biological samples, discussed Broadhurst et al. 2018. Initially, metabolite data matrix extracted MDAW::table_data subjected transformation scaling: new variable, peaklist, generated store names (M1…Mn) metabolites intended subsequent statistical analysis. peak data corresponding list samples extracted dataTable organized matrix, X. values X subjected logarithmic transformation (Xlog). MDAW::scale_data() helper function employed scale logarithmically transformed data (Xscale). Missing values imputed using k-nearest neighbor approach three neighbors, resulting table Xknn. transformed scaled dataset, Xknn, serves input PCA using MDAW::pca_plot() helper function, yielding PCA score loading plots interpretation quality assessment.","code":"list_of_peaks <- clean_table_peak[\"Name\"] table_data |>   dplyr::select(RowID,                 Idx,                 SampleID,                 SampleType,                 Class,                 list_of_peaks$Name) #> # A tibble: 140 × 57 #>    RowID   Idx SampleID  SampleType Class    M4    M5    M7    M8    M11   M14 #>    <chr> <dbl> <chr>     <chr>      <chr> <dbl> <dbl> <dbl> <dbl>  <dbl> <dbl> #>  1 1         1 sample_1  QC         QC     35   164.   41    46.5   61.7  35.3 #>  2 2         2 sample_2  Sample     GC     NA   694.   37.9 126.   491.   NA   #>  3 3         3 sample_3  Sample     BN     46.8 483.  110.   85.1 2441.   29.3 #>  4 4         4 sample_4  Sample     HE     14    88.6 170.   23.9  141.   62.9 #>  5 5         5 sample_5  Sample     GC      8.7 243.  349.   61.1   48.7  77.8 #>  6 6         6 sample_6  Sample     BN     18.7 200.   37.3 244.   104.   52.3 #>  7 7         7 sample_7  Sample     GC     NA   363.   59.6  51.3   58.1  34.6 #>  8 8         8 sample_8  Sample     HE     18.2  72.5  15.3  37.1   54.1  30.3 #>  9 9         9 sample_9  Sample     GC      8.4 270.  214.   65.6   92.9  61.9 #> 10 10       10 sample_10 QC         QC     36   203.   44.4  48.6   59    28.4 #> # ℹ 130 more rows #> # ℹ 46 more variables: M15 <dbl>, M25 <dbl>, M26 <dbl>, M31 <dbl>, M32 <dbl>, #> #   M33 <dbl>, M36 <dbl>, M37 <dbl>, M45 <dbl>, M48 <dbl>, M50 <dbl>, #> #   M51 <dbl>, M65 <dbl>, M66 <dbl>, M68 <dbl>, M71 <dbl>, M73 <dbl>, #> #   M74 <dbl>, M75 <dbl>, M88 <dbl>, M89 <dbl>, M90 <dbl>, M91 <dbl>, #> #   M93 <dbl>, M101 <dbl>, M104 <dbl>, M105 <dbl>, M106 <dbl>, M107 <dbl>, #> #   M110 <dbl>, M115 <dbl>, M116 <dbl>, M118 <dbl>, M119 <dbl>, M120 <dbl>, … data <- table_data |>     select(-c(1:5)) categories <- table_data |>     select(c(4:5))  #Imputate missing values with knn imputed_data <- data |>   as.matrix() |>   impute::impute.knn()  # Step 2: Perform PCA pca_result <- prcomp(imputed_data$data, scale. = TRUE)  pca_scores <- as.data.frame(pca_result$x)  # Combine PCA scores with categories for coloring pca_data <- cbind(pca_scores, categories) pca_plot <-  ggplot2::ggplot(pca_data,                   ggplot2::aes(x = PC1, y = PC2,                                color = SampleType,                                shape = Class)) +   ggplot2::geom_point(size = 2) +   ggplot2::scale_color_manual(values = c(\"blue\", \"red\")) +    ggplot2::scale_shape_manual(values = c(16, 17, 18, 19)) +   ggplot2::theme_bw() +   ggplot2::labs(title = \"Normal PCA Plot\", x = \"PC1\", y = \"PC2\")  pca_plot pca_plot <- MDAW::pca_interaction_plot(data = data,                                         categories = categories) pca_plot"},{"path":[]},{"path":"https://danymukesha.github.io/MDAW/articles/Introduction.html","id":"gastric-cancer-gc-vs-healthy-controls-he---comparison","dir":"Articles","previous_headings":"Case Study > Univariate Statistics","what":"Gastric Cancer (GC) vs Healthy Controls (HE) - Comparison","title":"Introduction to MDAW","text":"","code":"table_data_2Class <- table_data |>   dplyr::filter(Class == c(\"HE\", \"GC\")) # Reduce data table only to GC and HE class members pos_outcome <- \"GC\"   # Calculate basic statistics and create a statistics table. statsTable <- MDAW::univariate_2class(DataTable = table_data_2Class,                    PeakTable = clean_table_peak,                    group = 'Class',                   posclass = pos_outcome,                            parametric = TRUE) statsTable"},{"path":"https://danymukesha.github.io/MDAW/articles/Introduction.html","id":"save-to-excel-file","dir":"Articles","previous_headings":"Case Study > Univariate Statistics","what":"Save to excel file","title":"Introduction to MDAW","text":"","code":"MDAW::save_to_xlsx(data = statsTable, sheet_name = \"statsTable.xlsx\")"},{"path":[]},{"path":"https://danymukesha.github.io/MDAW/articles/Introduction.html","id":"mean-and-standard-deviation","dir":"Articles","previous_headings":"Statistical Methods","what":"Mean and Standard Deviation","title":"Introduction to MDAW","text":"mean (\\(\\bar{x}\\)) standard deviation (\\(\\sigma\\)) calculated group: Mean: \\[ \\bar{x} = \\frac{\\sum_{=1}^{n} x_i}{n} \\] Standard Deviation: \\[ \\sigma = \\sqrt{\\frac{\\sum_{=1}^{n} (x_i - \\bar{x})^2}{n - 1}} \\] Example: Suppose dataset: [12, 15, 18, 20, 25] Calculate mean: \\[ \\bar{x} = \\frac{12 + 15 + 18 + 20 + 25}{5} = \\frac{90}{5} = 18 \\] Calculate standard deviation: \\[ \\sigma = \\sqrt{\\frac{(12-18)^2 + (15-18)^2 + (18-18)^2 + (20-18)^2 + (25-18)^2}{5-1}} \\] \\[ \\sigma = \\sqrt{\\frac{36 + 9 + 0 + 4 + 49}{4}} = \\sqrt{\\frac{98}{4}} \\approx \\sqrt{24.5} \\approx 4.95 \\]","code":""},{"path":"https://danymukesha.github.io/MDAW/articles/Introduction.html","id":"confidence-interval","dir":"Articles","previous_headings":"Statistical Methods","what":"Confidence Interval","title":"Introduction to MDAW","text":"95% confidence interval mean calculated using standard error (\\(SE\\)): \\[ \\text{CI} = \\bar{x} \\pm (1.96 \\times SE) \\] , \\[ SE = \\frac{\\sigma}{\\sqrt{n}} \\] Example: Using previous example \\(\\bar{x} = 18\\) \\(\\sigma \\approx 4.95\\), assuming sample size \\(n = 5\\): \\[ SE = \\frac{4.95}{\\sqrt{5}} \\approx 2.21 \\] \\[ \\text{CI} = 18 \\pm (1.96 \\times 2.21) \\approx (13.66, 22.34) \\]","code":""},{"path":"https://danymukesha.github.io/MDAW/articles/Introduction.html","id":"t-test","dir":"Articles","previous_headings":"Statistical Methods","what":"T-test","title":"Introduction to MDAW","text":"t-test statistic calculated compare means groups. formula t-test statistic depends whether variances assumed equal unequal. Example: Suppose two groups sample means \\(\\bar{x}_1 = 18\\) \\(\\bar{x}_2 = 20\\), assuming equal variances: \\[ t = \\frac{\\bar{x}_1 - \\bar{x}_2}{\\sqrt{\\frac{s_1^2}{n_1} + \\frac{s_2^2}{n_2}}} \\] \\(s_1\\) \\(s_2\\) sample standard deviations, \\(n_1\\) \\(n_2\\) sample sizes.","code":""},{"path":"https://danymukesha.github.io/MDAW/articles/Introduction.html","id":"median-and-bootstrap-ci","dir":"Articles","previous_headings":"Statistical Methods","what":"Median and Bootstrap CI","title":"Introduction to MDAW","text":"median 95% bootstrap confidence interval calculated group. Example: Suppose dataset: [12, 15, 18, 20, 25] Calculate median: Since dataset odd number observations, median middle value, 18. Calculate bootstrap confidence interval: involves resampling dataset replacement, calculating median resampled dataset, finding 2.5th 97.5th percentiles medians.","code":""},{"path":"https://danymukesha.github.io/MDAW/articles/Introduction.html","id":"mann-whitney-u-test","dir":"Articles","previous_headings":"Statistical Methods","what":"Mann-Whitney U Test","title":"Introduction to MDAW","text":"Mann-Whitney U test used compare medians groups. Example: Suppose two groups observations: Group 1: [12, 15, 18, 20, 25] Group 2: [10, 14, 16, 19, 22] Rank observations together. Calculate sum ranks group. Calculate U statistic group. Use U statistics determine significant difference groups.","code":""},{"path":"https://danymukesha.github.io/MDAW/articles/Introduction.html","id":"shapiro-wilk-test","dir":"Articles","previous_headings":"Statistical Methods","what":"Shapiro-Wilk Test","title":"Introduction to MDAW","text":"Shapiro-Wilk test performed assess normality data distribution. Example: Suppose dataset: [12, 15, 18, 20, 25] Perform Shapiro-Wilk test using statistical software R functions. Obtain test statistic p-value. p-value less significance level (e.g., 0.05), reject null hypothesis conclude data normally distributed.","code":""},{"path":"https://danymukesha.github.io/MDAW/articles/Introduction.html","id":"levenes-test","dir":"Articles","previous_headings":"Statistical Methods","what":"Levene’s Test","title":"Introduction to MDAW","text":"Levene’s test used assess equality variances groups. Example: Suppose two groups observations: Group 1: [12, 15, 18, 20, 25] Group 2: [10, 14, 16, 19, 22] Calculate absolute deviations group means. Calculate mean absolute deviations group. Use means calculate Levene statistic. Compare Levene statistic critical value F-distribution determine variances significantly different.Sure, let’s provide full complete formulas statistical method along examples resolving procedures.","code":""},{"path":[]},{"path":"https://danymukesha.github.io/MDAW/articles/Introduction.html","id":"splitting-data-into-training-and-test-sets-","dir":"Articles","previous_headings":"Machine Learning","what":"Splitting data into Training and Test sets.","title":"Introduction to MDAW","text":"Multivariate predictive models often encounters challenge overfitting, can compromise performance. mitigate issue, ’s good practice divide source data two subsets: training set test set, allowing independent evaluation. approach, advocated researchers Westerhuis et al. (2008) Xia et al. (2012), ensures accurate assessment model performance. model fine-tuned using training data independently assessed using test data. true effectiveness model can accurately gauged using test data. ’s crucial training test datasets adequately represent population studied. typical approach split data 2:1 ratio (⅔ training, ⅓ testing) using stratified random sampling. step may omitted exploratory purposes limited sample sizes, caution warranted interpreting model hasn’t validated independent dataset. Employing techniques like stratified random sampling helps maintain class balance training test sets, fundamental requirement reliable model assessment. context giventable_data dataframe, focuses 2-class comparison (GC vs ), objective partition dataframe training subset (dataTrain) model training test set (dataTest) model evaluation. data split configured test set comprises 25% total samples. partitioning process conducted using ‘train_test_split()’ function scikit-learn module. Ensuring sample split stratified essential maintain balanced class representation training test sets. achieve , binary vector indicating stratification group membership required. Since ‘train_test_split()’ function expects binary (1/0) outcome indicators rather GC/class labels present table_data, class information sample converted binary list, denoted ‘Y’, provided code cell. Given dataset (dataTable2) binary outcome list (Y) used ’ stratification, employ train_test_split() function following code cell. Upon creating training test sets, summary output displayed: DataTrain: Consists 62 samples, including 32 positive cases. DataTest: Comprises 21 samples, 11 positive cases. Two new dataframes two lists generated: dataTrain: Represents training dataset (dataframe). dataTest: Represents test dataset (dataframe). Ytrain: Contains known outcomes training dataset. Ytest: Contains known outcomes test dataset.","code":"Y <- MDAW::create_binary_Y(dataTable = table_data_2Class,                             classColumn = \"Class\") split_data <- MDAW::custom_train_test_split(table_data_2Class, Y,                                              test_size = 0.25, seed = 123) #> DataTrain = 30 samples with 15 positive cases. #> DataTest = 10 samples with 6 positive cases. dim(split_data$dataTrain) #> [1]  30 154 dim(split_data$dataTest) #> [1]  10 154"},{"path":"https://danymukesha.github.io/MDAW/articles/Introduction.html","id":"determine-optimal-number-of-components-for-pls-da-model","dir":"Articles","previous_headings":"Machine Learning","what":"Determine optimal number of components for PLS-DA model","title":"Introduction to MDAW","text":"common approach identifying best PLS-DA model setup without risking overfitting involves employing k-fold cross-validation. Specifically tailored PLS-DA, entails systematic search across models 1 N latent variables (components). Initially, PLS-DA setup undergoes training using available data (XTknn Ytrain), followed assessing predictive performance using data, usually computing coefficient determination R^2. yields N evaluation scores (\\(R^2_1\\), \\(R^2_2\\), …, \\(R^2_N\\)). Subsequently, training data partitioned k equally sized subsets (folds). every PLS-DA configuration, k models constructed, model trained k−1 folds, remaining 1-fold utilized model evaluation, recording model predictions. process ensures fold held-exactly k models. model’s general predictive ability gauged comparing held-model predictions anticipated classification (cross-validated coefficient determination \\(Q^2\\)), yielding N cross-validated evaluation scores (\\(Q^2_1\\), \\(Q^2_2\\), …, \\(Q^2_N\\)). Plotting values R^2 Q^2 model’s complexity (number latent variables) typically reveals initial rise subsequent decline \\(Q^2\\). point Q^2 starts deviate R^2 signifies optimal number components, indicating balance model complexity overfitting. section, conduct 5-fold cross-validation using previously established training set (dataTrain) ascertain ideal number components PLS-DA model. Firstly, following cell, preprocess standardize training data dataTrain, employing techniques previous section PCA quality assessment (log-transformation, scaling, k-nearest-neighbour imputation missing values). stage implementation…","code":"sessioninfo::session_info() #> ─ Session info ─────────────────────────────────────────────────────────────── #>  setting  value #>  version  R version 4.3.3 (2024-02-29) #>  os       Ubuntu 22.04.4 LTS #>  system   x86_64, linux-gnu #>  ui       X11 #>  language en #>  collate  C.UTF-8 #>  ctype    C.UTF-8 #>  tz       UTC #>  date     2024-03-15 #>  pandoc   3.1.11 @ /opt/hostedtoolcache/pandoc/3.1.11/x64/ (via rmarkdown) #>  #> ─ Packages ─────────────────────────────────────────────────────────────────── #>  package      * version    date (UTC) lib source #>  abind          1.4-5      2016-07-21 [1] RSPM #>  backports      1.4.1      2021-12-13 [1] RSPM #>  broom          1.0.5      2023-06-09 [1] RSPM #>  bslib          0.6.1      2023-11-28 [1] RSPM #>  cachem         1.0.8      2023-05-01 [1] RSPM #>  car            3.1-2      2023-03-30 [1] RSPM #>  carData        3.0-5      2022-01-06 [1] RSPM #>  caret          6.0-94     2023-03-21 [1] RSPM #>  cellranger     1.1.0      2016-07-27 [1] RSPM #>  class          7.3-22     2023-05-03 [3] CRAN (R 4.3.3) #>  cli            3.6.2      2023-12-11 [1] RSPM #>  codetools      0.2-19     2023-02-01 [3] CRAN (R 4.3.3) #>  colorspace     2.1-0      2023-01-23 [1] RSPM #>  crosstalk      1.2.1      2023-11-23 [1] RSPM #>  data.table     1.15.2     2024-02-29 [1] RSPM #>  desc           1.4.3      2023-12-10 [1] RSPM #>  digest         0.6.35     2024-03-11 [1] RSPM #>  dplyr        * 1.1.4      2023-11-17 [1] RSPM #>  DT             0.32       2024-02-19 [1] RSPM #>  ellipsis       0.3.2      2021-04-29 [1] RSPM #>  evaluate       0.23       2023-11-01 [1] RSPM #>  factoextra     1.0.7      2020-04-01 [1] RSPM #>  fansi          1.0.6      2023-12-08 [1] RSPM #>  farver         2.1.1      2022-07-06 [1] RSPM #>  fastmap        1.1.1      2023-02-24 [1] RSPM #>  foreach        1.5.2      2022-02-02 [1] RSPM #>  fs             1.6.3      2023-07-20 [1] RSPM #>  future         1.33.1     2023-12-22 [1] RSPM #>  future.apply   1.11.1     2023-12-21 [1] RSPM #>  generics       0.1.3      2022-07-05 [1] RSPM #>  ggplot2      * 3.5.0      2024-02-23 [1] RSPM #>  ggpubr         0.6.0      2023-02-10 [1] RSPM #>  ggrepel        0.9.5      2024-01-10 [1] RSPM #>  ggsignif       0.6.4      2022-10-13 [1] RSPM #>  globals        0.16.3     2024-03-08 [1] RSPM #>  glue           1.7.0      2024-01-09 [1] RSPM #>  gower          1.0.1      2022-12-22 [1] RSPM #>  gtable         0.3.4      2023-08-21 [1] RSPM #>  hardhat        1.3.1      2024-02-02 [1] RSPM #>  highr          0.10       2022-12-22 [1] RSPM #>  htmltools      0.5.7      2023-11-03 [1] RSPM #>  htmlwidgets    1.6.4      2023-12-06 [1] RSPM #>  impute         1.76.0     2023-10-24 [1] Bioconductor #>  ipred          0.9-14     2023-03-09 [1] RSPM #>  iterators      1.0.14     2022-02-05 [1] RSPM #>  jquerylib      0.1.4      2021-04-26 [1] RSPM #>  jsonlite       1.8.8      2023-12-04 [1] RSPM #>  knitr          1.45       2023-10-30 [1] RSPM #>  labeling       0.4.3      2023-08-29 [1] RSPM #>  lattice        0.22-5     2023-10-24 [3] CRAN (R 4.3.3) #>  lava           1.8.0      2024-03-05 [1] RSPM #>  lifecycle      1.0.4      2023-11-07 [1] RSPM #>  listenv        0.9.1      2024-01-29 [1] RSPM #>  lubridate      1.9.3      2023-09-27 [1] RSPM #>  magrittr       2.0.3      2022-03-30 [1] RSPM #>  MASS           7.3-60.0.1 2024-01-13 [3] CRAN (R 4.3.3) #>  Matrix         1.6-5      2024-01-11 [3] CRAN (R 4.3.3) #>  MDAW         * 0.99.0     2024-03-15 [1] local #>  memoise        2.0.1      2021-11-26 [1] RSPM #>  ModelMetrics   1.2.2.2    2020-03-17 [1] RSPM #>  munsell        0.5.0      2018-06-12 [1] RSPM #>  nlme           3.1-164    2023-11-27 [3] CRAN (R 4.3.3) #>  nnet           7.3-19     2023-05-03 [3] CRAN (R 4.3.3) #>  parallelly     1.37.1     2024-02-29 [1] RSPM #>  pillar         1.9.0      2023-03-22 [1] RSPM #>  pkgconfig      2.0.3      2019-09-22 [1] RSPM #>  pkgdown        2.0.7      2022-12-14 [1] any (@2.0.7) #>  plyr           1.8.9      2023-10-02 [1] RSPM #>  pROC           1.18.5     2023-11-01 [1] RSPM #>  prodlim        2023.08.28 2023-08-28 [1] RSPM #>  purrr          1.0.2      2023-08-10 [1] RSPM #>  R6             2.5.1      2021-08-19 [1] RSPM #>  ragg           1.3.0      2024-03-13 [1] RSPM #>  Rcpp           1.0.12     2024-01-09 [1] RSPM #>  reactable    * 0.4.4      2023-03-12 [1] RSPM #>  reactR         0.5.0      2023-10-11 [1] RSPM #>  readxl         1.4.3      2023-07-06 [1] RSPM #>  recipes        1.0.10     2024-02-18 [1] RSPM #>  reshape2       1.4.4      2020-04-09 [1] RSPM #>  rlang          1.1.3      2024-01-10 [1] RSPM #>  rmarkdown      2.26       2024-03-05 [1] RSPM #>  rpart          4.1.23     2023-12-05 [3] CRAN (R 4.3.3) #>  rstatix        0.7.2      2023-02-01 [1] RSPM #>  sass           0.4.8      2023-12-06 [1] RSPM #>  scales         1.3.0      2023-11-28 [1] RSPM #>  sessioninfo  * 1.2.2      2021-12-06 [1] RSPM #>  stringi        1.8.3      2023-12-11 [1] RSPM #>  stringr        1.5.1      2023-11-14 [1] RSPM #>  survival       3.5-8      2024-02-14 [3] CRAN (R 4.3.3) #>  systemfonts    1.0.6      2024-03-07 [1] RSPM #>  textshaping    0.3.7      2023-10-09 [1] RSPM #>  tibble         3.2.1      2023-03-20 [1] RSPM #>  tidyr          1.3.1      2024-01-24 [1] RSPM #>  tidyselect     1.2.1      2024-03-11 [1] RSPM #>  timechange     0.3.0      2024-01-18 [1] RSPM #>  timeDate       4032.109   2023-12-14 [1] RSPM #>  utf8           1.2.4      2023-10-22 [1] RSPM #>  vctrs          0.6.5      2023-12-01 [1] RSPM #>  withr          3.0.0      2024-01-16 [1] RSPM #>  writexl        1.5.0      2024-02-09 [1] RSPM #>  xfun           0.42       2024-02-08 [1] RSPM #>  yaml           2.3.8      2023-12-11 [1] RSPM #>  #>  [1] /home/runner/work/_temp/Library #>  [2] /opt/R/4.3.3/lib/R/site-library #>  [3] /opt/R/4.3.3/lib/R/library #>  #> ──────────────────────────────────────────────────────────────────────────────"},{"path":"https://danymukesha.github.io/MDAW/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Dany Mukesha. Author, maintainer.","code":""},{"path":"https://danymukesha.github.io/MDAW/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Mukesha D (2024). MDAW: Metabolomic Data Analysis Workflow. R package version 0.99.0, https://github.com/danymukesha/MDAW, https://danymukesha.github.io/MDAW/.","code":"@Manual{,   title = {MDAW: Metabolomic Data Analysis Workflow},   author = {Dany Mukesha},   year = {2024},   note = {R package version 0.99.0, https://github.com/danymukesha/MDAW},   url = {https://danymukesha.github.io/MDAW/}, }"},{"path":"https://danymukesha.github.io/MDAW/index.html","id":"mdaw-","dir":"","previous_headings":"","what":"Metabolomic Data Analysis Workflow","title":"Metabolomic Data Analysis Workflow","text":"Metabolomic Data Analysis Workflow","code":""},{"path":"https://danymukesha.github.io/MDAW/index.html","id":"getting-started","dir":"","previous_headings":"","what":"Getting started","title":"Metabolomic Data Analysis Workflow","text":"Introduction MDAW computational workflow statistical analysis untargeted targeted metabolomic data.","code":""},{"path":"https://danymukesha.github.io/MDAW/reference/MDAW-package.html","id":null,"dir":"Reference","previous_headings":"","what":"MDAW: Metabolomic Data Analysis Workflow — MDAW-package","title":"MDAW: Metabolomic Data Analysis Workflow — MDAW-package","text":"Enhancing Reproducibility: Computational Workflow Statistical Analysis Untargeted Targeted Metabolomics Data.","code":""},{"path":[]},{"path":"https://danymukesha.github.io/MDAW/reference/MDAW-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"MDAW: Metabolomic Data Analysis Workflow — MDAW-package","text":"Maintainer: Dany Mukesha danymukesha@gmail.com (ORCID)","code":""},{"path":"https://danymukesha.github.io/MDAW/reference/calculate_descriptive_stats.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform descriptive statistics on metabolomics data — calculate_descriptive_stats","title":"Perform descriptive statistics on metabolomics data — calculate_descriptive_stats","text":"function calculates descriptive statistics metabolomics data, including mean, median, standard deviation, minimum, maximum, quartiles.","code":""},{"path":"https://danymukesha.github.io/MDAW/reference/calculate_descriptive_stats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform descriptive statistics on metabolomics data — calculate_descriptive_stats","text":"","code":"calculate_descriptive_stats(data)"},{"path":"https://danymukesha.github.io/MDAW/reference/calculate_descriptive_stats.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform descriptive statistics on metabolomics data — calculate_descriptive_stats","text":"data data frame containing metabolomics data. row represents single urine sample, columns M1...M149 describing metabolite concentrations, Column SampleType indicating whether sample pooled QC study sample, Column Class indicating clinical outcome observed individual (GC = Gastric Cancer, BN = Benign Tumor, = Healthy Control).","code":""},{"path":"https://danymukesha.github.io/MDAW/reference/calculate_descriptive_stats.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform descriptive statistics on metabolomics data — calculate_descriptive_stats","text":"data frame containing descriptive statistics metabolite across different sample types classes.","code":""},{"path":"https://danymukesha.github.io/MDAW/reference/calculate_descriptive_stats.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform descriptive statistics on metabolomics data — calculate_descriptive_stats","text":"","code":"data <- MDAW::table_data descriptive_stats <- calculate_descriptive_stats(data)"},{"path":"https://danymukesha.github.io/MDAW/reference/clean_table_peak.html","id":null,"dir":"Reference","previous_headings":"","what":"Clean metabolites from Table of Peaks — clean_table_peak","title":"Clean metabolites from Table of Peaks — clean_table_peak","text":"[`clean_table_peak`] filters clean metabolites provided table_peak based criteria, missing values standard deviation peaks.","code":""},{"path":"https://danymukesha.github.io/MDAW/reference/clean_table_peak.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clean metabolites from Table of Peaks — clean_table_peak","text":"","code":"clean_table_peak(table, min_QC_RSD = NULL, min_Perc_missing = NULL)"},{"path":"https://danymukesha.github.io/MDAW/reference/clean_table_peak.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clean metabolites from Table of Peaks — clean_table_peak","text":"table data frame containing metabolite information including QC_min_QC_RSD min_Perc_missing. min_QC_RSD Relative Standard Deviation min_Perc_missing percentage absent/missing values","code":""},{"path":"https://danymukesha.github.io/MDAW/reference/clean_table_peak.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clean metabolites from Table of Peaks — clean_table_peak","text":"data frame containing clean metabolites.","code":""},{"path":"https://danymukesha.github.io/MDAW/reference/clean_table_peak.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Clean metabolites from Table of Peaks — clean_table_peak","text":"","code":"library(MDAW) peaks <- MDAW::table_peak clean_metabolites <-   MDAW::clean_table_peak(table = table_peak,     min_QC_RSD = 20,     min_Perc_missing = 20) #> 52 remaining peaks."},{"path":"https://danymukesha.github.io/MDAW/reference/create_binary_Y.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a binary Y vector for stratifying the samples — create_binary_Y","title":"Create a binary Y vector for stratifying the samples — create_binary_Y","text":"function takes data table creates binary Y vector based specified column. column correspond class labels, two distinct groups.","code":""},{"path":"https://danymukesha.github.io/MDAW/reference/create_binary_Y.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a binary Y vector for stratifying the samples — create_binary_Y","text":"","code":"create_binary_Y(dataTable, classColumn)"},{"path":"https://danymukesha.github.io/MDAW/reference/create_binary_Y.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a binary Y vector for stratifying the samples — create_binary_Y","text":"dataTable data table containing class labels. classColumn name column data table corresponds class labels.","code":""},{"path":"https://danymukesha.github.io/MDAW/reference/create_binary_Y.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a binary Y vector for stratifying the samples — create_binary_Y","text":"binary vector class labels converted binary values (1 one group, 0 ).","code":""},{"path":"https://danymukesha.github.io/MDAW/reference/create_binary_Y.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a binary Y vector for stratifying the samples — create_binary_Y","text":"","code":"dataTable <- data.frame(Class = c(\"GC\", \"HE\", \"GC\", \"HE\")) binaryY <- create_binary_Y(dataTable, \"Class\")"},{"path":"https://danymukesha.github.io/MDAW/reference/custom_train_test_split.html","id":null,"dir":"Reference","previous_headings":"","what":"Custom Train-Test Split Function — custom_train_test_split","title":"Custom Train-Test Split Function — custom_train_test_split","text":"function splits dataset binary outcomes training test sets. replicates functionality scikit-learn's train_test_split function.","code":""},{"path":"https://danymukesha.github.io/MDAW/reference/custom_train_test_split.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Custom Train-Test Split Function — custom_train_test_split","text":"","code":"custom_train_test_split(dataTable2, Y, test_size = 0.25, seed = NULL)"},{"path":"https://danymukesha.github.io/MDAW/reference/custom_train_test_split.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Custom Train-Test Split Function — custom_train_test_split","text":"dataTable2 dataset split. Y List binary outcomes stratification. test_size Proportion dataset include test set. seed Seed random number generation.","code":""},{"path":"https://danymukesha.github.io/MDAW/reference/custom_train_test_split.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Custom Train-Test Split Function — custom_train_test_split","text":"list containing: dataTrain Training dataset (dataframe) dataTest Test dataset (dataframe) Ytrain Known outcomes training dataset Ytest Known outcomes test dataset","code":""},{"path":"https://danymukesha.github.io/MDAW/reference/custom_train_test_split.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Custom Train-Test Split Function — custom_train_test_split","text":"","code":"dataTable2 <- data.frame(matrix(rnorm(100*10), nrow=100, ncol=10)) Y <- sample(c(0,1), 100, replace = TRUE) split_data <- custom_train_test_split(dataTable2, Y, test_size = 0.25, seed = 123) #> DataTrain = 75 samples with 36 positive cases. #> DataTest = 25 samples with 10 positive cases. dim(split_data$dataTrain) #> [1] 75 10 dim(split_data$dataTest) #> [1] 25 10"},{"path":"https://danymukesha.github.io/MDAW/reference/import_dataXL.html","id":null,"dir":"Reference","previous_headings":"","what":"Import Data and Peak tables from xslx — import_dataXL","title":"Import Data and Peak tables from xslx — import_dataXL","text":"[import_dataXL()] reads sheets xslx load .","code":""},{"path":"https://danymukesha.github.io/MDAW/reference/import_dataXL.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Import Data and Peak tables from xslx — import_dataXL","text":"","code":"import_dataXL(xlsx_file_name, sheet_name = NULL, interactive_output = FALSE)"},{"path":"https://danymukesha.github.io/MDAW/reference/import_dataXL.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Import Data and Peak tables from xslx — import_dataXL","text":"xlsx_file_name name excel file. sheet_name name indicating sheet interest. interactive_output Boolean indicating whether output table interactive mode using reactable.","code":""},{"path":"https://danymukesha.github.io/MDAW/reference/import_dataXL.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Import Data and Peak tables from xslx — import_dataXL","text":"table `tibble` format reactable interactive_output *TRUE*.","code":""},{"path":"https://danymukesha.github.io/MDAW/reference/import_dataXL.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Import Data and Peak tables from xslx — import_dataXL","text":"","code":"library(MDAW) excel_file <- \"Gastric_NMR.xlsx\" path <- system.file(\"extdata\", \"Gastric_NMR.xlsx\", package = \"MDAW\") MDAW::import_dataXL(xlsx_file_name = path,     sheet_name = \"Data\") #> Loading sheet: Data  #> TOTAL ROWS: 140  #> Done! #> # A tibble: 140 × 154 #>    RowID   Idx SampleID  SampleType Class    M1      M2    M3    M4    M5    M6 #>    <chr> <dbl> <chr>     <chr>      <chr> <dbl>   <dbl> <dbl> <dbl> <dbl> <dbl> #>  1 1         1 sample_1  QC         QC     90.1   492.  203.   35   164.   19.7 #>  2 2         2 sample_2  Sample     GC     43     526.  130.   NA   694.  114.  #>  3 3         3 sample_3  Sample     BN    214.  10703.  105.   46.8 483.  152.  #>  4 4         4 sample_4  Sample     HE     31.6    59.7  86.4  14    88.6  10.3 #>  5 5         5 sample_5  Sample     GC     81.9   259.  315.    8.7 243.   18.4 #>  6 6         6 sample_6  Sample     BN    197.    128.  862.   18.7 200.    4.7 #>  7 7         7 sample_7  Sample     GC     45.5   190.   32    NA   363.   35.7 #>  8 8         8 sample_8  Sample     HE     91     232.  212.   18.2  72.5   6.7 #>  9 9         9 sample_9  Sample     GC    481.    470.   60.7   8.4 270.   57.4 #> 10 10       10 sample_10 QC         QC     62.2   182.   75.5  36   203.   18.7 #> # ℹ 130 more rows #> # ℹ 143 more variables: M7 <dbl>, M8 <dbl>, M9 <dbl>, M10 <dbl>, M11 <dbl>, #> #   M12 <dbl>, M13 <dbl>, M14 <dbl>, M15 <dbl>, M16 <dbl>, M17 <dbl>, #> #   M18 <dbl>, M19 <dbl>, M20 <dbl>, M21 <dbl>, M22 <dbl>, M23 <dbl>, #> #   M24 <dbl>, M25 <dbl>, M26 <dbl>, M27 <dbl>, M28 <dbl>, M29 <dbl>, #> #   M30 <dbl>, M31 <dbl>, M32 <dbl>, M33 <dbl>, M34 <dbl>, M35 <dbl>, #> #   M36 <dbl>, M37 <dbl>, M38 <dbl>, M39 <dbl>, M40 <dbl>, M41 <dbl>, …"},{"path":"https://danymukesha.github.io/MDAW/reference/pca_interaction_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform PCA and Generate PCA Plot with Interaction — pca_interaction_plot","title":"Perform PCA and Generate PCA Plot with Interaction — pca_interaction_plot","text":"function performs Principal Component Analysis (PCA) input data matrix generates PCA plot interaction using ggplot2 factoextra packages.","code":""},{"path":"https://danymukesha.github.io/MDAW/reference/pca_interaction_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform PCA and Generate PCA Plot with Interaction — pca_interaction_plot","text":"","code":"pca_interaction_plot(data, categories)"},{"path":"https://danymukesha.github.io/MDAW/reference/pca_interaction_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform PCA and Generate PCA Plot with Interaction — pca_interaction_plot","text":"data data frame containing input data, variables interest columns 6 onwards. categories character vector specifying names categorical variables used interaction coloring.","code":""},{"path":"https://danymukesha.github.io/MDAW/reference/pca_interaction_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform PCA and Generate PCA Plot with Interaction — pca_interaction_plot","text":"None. function generates PCA plot interaction.","code":""},{"path":[]},{"path":"https://danymukesha.github.io/MDAW/reference/pca_interaction_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform PCA and Generate PCA Plot with Interaction — pca_interaction_plot","text":"","code":"# Example usage dat <- MDAW::table_data |>     dplyr::select(-c(1:5)) cat <- MDAW::table_data |>     dplyr::select(c(4:5)) pca_interaction_plot(data = dat, categories = cat) #> Warning: `gather_()` was deprecated in tidyr 1.2.0. #> ℹ Please use `gather()` instead. #> ℹ The deprecated feature was likely used in the factoextra package. #>   Please report the issue at <https://github.com/kassambara/factoextra/issues>."},{"path":"https://danymukesha.github.io/MDAW/reference/plot_metabolite_boxplots.html","id":null,"dir":"Reference","previous_headings":"","what":"Visualize metabolite concentrations by sample type — plot_metabolite_boxplots","title":"Visualize metabolite concentrations by sample type — plot_metabolite_boxplots","text":"function creates boxplots visualize distribution metabolite concentrations sample type.","code":""},{"path":"https://danymukesha.github.io/MDAW/reference/plot_metabolite_boxplots.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualize metabolite concentrations by sample type — plot_metabolite_boxplots","text":"","code":"plot_metabolite_boxplots(data)"},{"path":"https://danymukesha.github.io/MDAW/reference/plot_metabolite_boxplots.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualize metabolite concentrations by sample type — plot_metabolite_boxplots","text":"data data frame containing metabolomics data.","code":""},{"path":"https://danymukesha.github.io/MDAW/reference/plot_metabolite_boxplots.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Visualize metabolite concentrations by sample type — plot_metabolite_boxplots","text":"ggplot object displaying boxplots metabolite concentrations sample type.","code":""},{"path":"https://danymukesha.github.io/MDAW/reference/plot_metabolite_boxplots.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Visualize metabolite concentrations by sample type — plot_metabolite_boxplots","text":"","code":"data <- MDAW::table_data plot_metabolite_boxplots(data) #> Warning: Removed 1069 rows containing non-finite outside the scale range #> (`stat_boxplot()`)."},{"path":"https://danymukesha.github.io/MDAW/reference/plot_metabolite_boxplots_by_class.html","id":null,"dir":"Reference","previous_headings":"","what":"Visualize metabolite concentrations by class — plot_metabolite_boxplots_by_class","title":"Visualize metabolite concentrations by class — plot_metabolite_boxplots_by_class","text":"function creates boxplots visualize distribution metabolite concentrations class.","code":""},{"path":"https://danymukesha.github.io/MDAW/reference/plot_metabolite_boxplots_by_class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualize metabolite concentrations by class — plot_metabolite_boxplots_by_class","text":"","code":"plot_metabolite_boxplots_by_class(data)"},{"path":"https://danymukesha.github.io/MDAW/reference/plot_metabolite_boxplots_by_class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualize metabolite concentrations by class — plot_metabolite_boxplots_by_class","text":"data data frame containing metabolomics data.","code":""},{"path":"https://danymukesha.github.io/MDAW/reference/plot_metabolite_boxplots_by_class.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Visualize metabolite concentrations by class — plot_metabolite_boxplots_by_class","text":"ggplot object displaying boxplots metabolite concentrations class.","code":""},{"path":"https://danymukesha.github.io/MDAW/reference/plot_metabolite_boxplots_by_class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Visualize metabolite concentrations by class — plot_metabolite_boxplots_by_class","text":"","code":"data <- MDAW::table_data plot_metabolite_boxplots_by_class(data) #> Warning: Removed 1069 rows containing non-finite outside the scale range #> (`stat_boxplot()`)."},{"path":"https://danymukesha.github.io/MDAW/reference/plot_metabolite_histogram.html","id":null,"dir":"Reference","previous_headings":"","what":"Visualize distribution of metabolite concentrations — plot_metabolite_histogram","title":"Visualize distribution of metabolite concentrations — plot_metabolite_histogram","text":"function creates histograms visualize distribution metabolite concentrations.","code":""},{"path":"https://danymukesha.github.io/MDAW/reference/plot_metabolite_histogram.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualize distribution of metabolite concentrations — plot_metabolite_histogram","text":"","code":"plot_metabolite_histogram(data, metabolite_name)"},{"path":"https://danymukesha.github.io/MDAW/reference/plot_metabolite_histogram.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualize distribution of metabolite concentrations — plot_metabolite_histogram","text":"data data frame containing metabolomics data. metabolite_name Name metabolite visualize.","code":""},{"path":"https://danymukesha.github.io/MDAW/reference/plot_metabolite_histogram.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Visualize distribution of metabolite concentrations — plot_metabolite_histogram","text":"ggplot object displaying histogram metabolite concentrations.","code":""},{"path":"https://danymukesha.github.io/MDAW/reference/plot_metabolite_histogram.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Visualize distribution of metabolite concentrations — plot_metabolite_histogram","text":"","code":"data <- MDAW::table_data plot_metabolite_histogram(data, \"M1\") #> Warning: Removed 16 rows containing non-finite outside the scale range (`stat_bin()`)."},{"path":"https://danymukesha.github.io/MDAW/reference/save_to_xlsx.html","id":null,"dir":"Reference","previous_headings":"","what":"Save a tibble to an XLSX file — save_to_xlsx","title":"Save a tibble to an XLSX file — save_to_xlsx","text":"[`save_to_xlsx`] saves tibble (data frame) XLSX file using writexl package.","code":""},{"path":"https://danymukesha.github.io/MDAW/reference/save_to_xlsx.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Save a tibble to an XLSX file — save_to_xlsx","text":"","code":"save_to_xlsx(data, path)"},{"path":"https://danymukesha.github.io/MDAW/reference/save_to_xlsx.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Save a tibble to an XLSX file — save_to_xlsx","text":"data tibble saved. path file path XLSX file saved.","code":""},{"path":"https://danymukesha.github.io/MDAW/reference/save_to_xlsx.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Save a tibble to an XLSX file — save_to_xlsx","text":"Nothing returned. tibble saved specified path.","code":""},{"path":"https://danymukesha.github.io/MDAW/reference/save_to_xlsx.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Save a tibble to an XLSX file — save_to_xlsx","text":"","code":"library(tibble) library(MDAW)  data <- tibble(x = 1:5, y = letters[1:5]) data #> # A tibble: 5 × 2 #>       x y     #>   <int> <chr> #> 1     1 a     #> 2     2 b     #> 3     3 c     #> 4     4 d     #> 5     5 e      # MDAW::save_to_xlsx(data, \"data.xlsx\")"},{"path":"https://danymukesha.github.io/MDAW/reference/scale_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Scales input data based on various methods — scale_data","title":"Scales input data based on various methods — scale_data","text":"Scales input data x based various methods 'auto', 'pareto', 'vast', 'level'.","code":""},{"path":"https://danymukesha.github.io/MDAW/reference/scale_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Scales input data based on various methods — scale_data","text":"","code":"scale_data(   x,   axis = 0,   ddof = 1,   method = \"auto\",   mu = \"default\",   sigma = \"default\",   return_mu_sigma = FALSE )"},{"path":"https://danymukesha.github.io/MDAW/reference/scale_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Scales input data based on various methods — scale_data","text":"x array-like object contains data. axis integer NULL, (default 0). axis along operate. ddof integer, (default 1). degrees freedom correction. method character string, (default \"auto\"). Method used scale x. Accepted methods 'auto', 'pareto', 'vast', 'level'. mu numeric \"default\", (default \"default\"). mu provided used, however, default calculated. sigma numeric \"default\",  (default \"default\"). sigma provided used, however, default calculated. return_mu_sigma logical, (default FALSE). TRUE, mu sigma returned instead z. Note, useful mu sigma want stored future use.","code":""},{"path":"https://danymukesha.github.io/MDAW/reference/scale_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Scales input data based on various methods — scale_data","text":"return_mu_sigma = FALSE, returns scaled data z. return_mu_sigma = TRUE, returns list containing scaled data z, mu, sigma.","code":""},{"path":"https://danymukesha.github.io/MDAW/reference/scale_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Scales input data based on various methods — scale_data","text":"","code":"x <- c(1, 2, 3, 4, 5) scaled_data <- scale(x)  # Define a 2-dimensional input matrix x <- matrix(c(1, 2, 3, 4, 5, 6, 7, 8, 9), nrow = 3, ncol = 3) # Scale the input matrix using the default settings scaled_data <- scale(x) # Print the scaled data print(scaled_data) #>      [,1] [,2] [,3] #> [1,]   -1   -1   -1 #> [2,]    0    0    0 #> [3,]    1    1    1 #> attr(,\"scaled:center\") #> [1] 2 5 8 #> attr(,\"scaled:scale\") #> [1] 1 1 1"},{"path":"https://danymukesha.github.io/MDAW/reference/split_data_train_test.html","id":null,"dir":"Reference","previous_headings":"","what":"Split Data into Training and Test Sets — split_data_train_test","title":"Split Data into Training and Test Sets — split_data_train_test","text":"function takes dataset splits training test sets based specified ratio.","code":""},{"path":"https://danymukesha.github.io/MDAW/reference/split_data_train_test.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Split Data into Training and Test Sets — split_data_train_test","text":"","code":"split_data_train_test(data, split_ratio, seed = NULL)"},{"path":"https://danymukesha.github.io/MDAW/reference/split_data_train_test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Split Data into Training and Test Sets — split_data_train_test","text":"data data frame matrix containing dataset split. split_ratio numeric value 0 1 indicating proportion dataset include training set. rest included test set. seed optional seed reproducibility.","code":""},{"path":"https://danymukesha.github.io/MDAW/reference/split_data_train_test.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Split Data into Training and Test Sets — split_data_train_test","text":"list containing two elements: 'train' training set 'test' test set.","code":""},{"path":"https://danymukesha.github.io/MDAW/reference/split_data_train_test.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Split Data into Training and Test Sets — split_data_train_test","text":"","code":"data(iris) split_data <- split_data_train_test(iris, split_ratio = 0.8, seed = 123) #> Warning: Some classes have no records (  ) and these will be ignored #> Warning: Some classes have a single record (  ) and these will be selected for the sample dim(split_data$train) #> [1] 5 5 dim(split_data$test) #> [1] 145   5"},{"path":"https://danymukesha.github.io/MDAW/reference/table_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Metabolite `Data` with the Interactive Table — table_data","title":"Metabolite `Data` with the Interactive Table — table_data","text":"row within table_data corresponds distinct urine sample, following column descriptions:","code":""},{"path":"https://danymukesha.github.io/MDAW/reference/table_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Metabolite `Data` with the Interactive Table — table_data","text":"","code":"table_data"},{"path":"https://danymukesha.github.io/MDAW/reference/table_data.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Metabolite `Data` with the Interactive Table — table_data","text":"`table_data` table encompasses 140 samples 149 metabolites; data frame 140 rows 149 columns: RowID `RowID` column represents row id sample Idx `idX` column represents index sample Day Expt `Day Expt` column represents data extraction   sample SampleType `SampleType` column specifies whether   sample pertains pooled quality control (QC) sample   study sample. QC `QC` column identified Quality Control sample    (QC==1 sample quality control, QC 0   sample quality control.) Class `Class` column denotes clinical outcome    observed individual, abbreviations representing     different conditions: \"GC\" Gastric Cancer, \"BN\" Benign Tumor,      \"\" Healthy Control.","code":""},{"path":"https://danymukesha.github.io/MDAW/reference/table_data.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Metabolite `Data` with the Interactive Table — table_data","text":"https://www.metabolomicsworkbench.org/data/DRCCMetadata.php?Mode=Project&ProjectID=PR000699","code":""},{"path":"https://danymukesha.github.io/MDAW/reference/table_peak.html","id":null,"dir":"Reference","previous_headings":"","what":"Metabolite `Peak` with the Interactive Table — table_peak","title":"Metabolite `Peak` with the Interactive Table — table_peak","text":"row within table_peak corresponds metabolite, following column descriptions:","code":""},{"path":"https://danymukesha.github.io/MDAW/reference/table_peak.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Metabolite `Peak` with the Interactive Table — table_peak","text":"","code":"table_peak"},{"path":"https://danymukesha.github.io/MDAW/reference/table_peak.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Metabolite `Peak` with the Interactive Table — table_peak","text":"`table_peak` table encompasses 149 metabolites features, data frame 129 rows 4 columns: RowID `RowID` column represents row id metabolite Idx `idX` column represents index metabolite Name `Name` column represents name metabolite Label `Label` column represents chemical nomenclature     metabolite","code":""},{"path":"https://danymukesha.github.io/MDAW/reference/table_peak.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Metabolite `Peak` with the Interactive Table — table_peak","text":"https://www.metabolomicsworkbench.org/data/DRCCMetadata.php?Mode=Project&ProjectID=PR000699","code":""},{"path":"https://danymukesha.github.io/MDAW/reference/univariate_2class.html","id":null,"dir":"Reference","previous_headings":"","what":"Univariate Statistics for Two-Class Data — univariate_2class","title":"Univariate Statistics for Two-Class Data — univariate_2class","text":"Calculates univariate statistics two-class data including mean, median, confidence intervals, statistical tests t-test Mann-Whitney U test.","code":""},{"path":"https://danymukesha.github.io/MDAW/reference/univariate_2class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Univariate Statistics for Two-Class Data — univariate_2class","text":"","code":"univariate_2class(   DataTable,   PeakTable,   group,   posclass,   parametric = TRUE,   seed = NULL )"},{"path":"https://danymukesha.github.io/MDAW/reference/univariate_2class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Univariate Statistics for Two-Class Data — univariate_2class","text":"DataTable Data sheet required columns. PeakTable Peak sheet required columns. group Name column DataTable contains Class data. posclass Name positive class group column. parametric TRUE, parametric statistics (mean, t-test) calculated. FALSE, non-parametric statistics (median, Mann-Whitney U test) calculated. .e. Median 95%CI Mann-Whitney U test calculated instead Mean 95%CI t-test. seed Used seed generator  Median 95% CI bootstrap (resample replacement) calculating bootstrap confidence intervals. Ignored parametric TRUE. Note, parametric=TRUE seed irrelevant Mean 95% CI calculated parametrically.","code":""},{"path":"https://danymukesha.github.io/MDAW/reference/univariate_2class.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Univariate Statistics for Two-Class Data — univariate_2class","text":"data frame containing univariate statistics peak. table  contain multiple univariate statistics (2 class).","code":""},{"path":"https://danymukesha.github.io/MDAW/reference/univariate_2class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Univariate Statistics for Two-Class Data — univariate_2class","text":"","code":"# Example usage DataTable <- MDAW::table_data PeakTable <- MDAW::table_peak table_data_2Class <- DataTable |>       dplyr::filter(Class == c(\"HE\", \"GC\")) # Reduce data table only to GC and HE class members pos_outcome <- \"GC\" univariate_2class(table_data_2Class, PeakTable, group = \"Class\",       posclass = pos_outcome)  {\"x\":{\"filter\":\"none\",\"vertical\":false,\"extensions\":[\"Buttons\"],\"data\":[[\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\",\"11\",\"12\",\"13\",\"14\",\"15\",\"16\",\"17\",\"18\",\"19\",\"20\",\"21\",\"22\",\"23\",\"24\",\"25\",\"26\",\"27\",\"28\",\"29\",\"30\",\"31\",\"32\",\"33\",\"34\",\"35\",\"36\",\"37\",\"38\",\"39\",\"40\",\"41\",\"42\",\"43\",\"44\",\"45\",\"46\",\"47\",\"48\",\"49\",\"50\",\"51\",\"52\",\"53\",\"54\",\"55\",\"56\",\"57\",\"58\",\"59\",\"60\",\"61\",\"62\",\"63\",\"64\",\"65\",\"66\",\"67\",\"68\",\"69\",\"70\",\"71\",\"72\",\"73\",\"74\",\"75\",\"76\",\"77\",\"78\",\"79\",\"80\",\"81\",\"82\",\"83\",\"84\",\"85\",\"86\",\"87\",\"88\",\"89\",\"90\",\"91\",\"92\",\"93\",\"94\",\"95\",\"96\",\"97\",\"98\",\"99\",\"100\",\"101\",\"102\",\"103\",\"104\",\"105\",\"106\",\"107\",\"108\",\"109\",\"110\",\"111\",\"112\",\"113\",\"114\",\"115\",\"116\",\"117\",\"118\",\"119\",\"120\",\"121\",\"122\",\"123\",\"124\",\"125\",\"126\",\"127\",\"128\",\"129\",\"130\",\"131\",\"132\",\"133\",\"134\",\"135\",\"136\",\"137\",\"138\",\"139\",\"140\",\"141\",\"142\",\"143\",\"144\",\"145\",\"146\",\"147\",\"148\",\"149\"],[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149],[\"M1\",\"M2\",\"M3\",\"M4\",\"M5\",\"M6\",\"M7\",\"M8\",\"M9\",\"M10\",\"M11\",\"M12\",\"M13\",\"M14\",\"M15\",\"M16\",\"M17\",\"M18\",\"M19\",\"M20\",\"M21\",\"M22\",\"M23\",\"M24\",\"M25\",\"M26\",\"M27\",\"M28\",\"M29\",\"M30\",\"M31\",\"M32\",\"M33\",\"M34\",\"M35\",\"M36\",\"M37\",\"M38\",\"M39\",\"M40\",\"M41\",\"M42\",\"M43\",\"M44\",\"M45\",\"M46\",\"M47\",\"M48\",\"M49\",\"M50\",\"M51\",\"M52\",\"M53\",\"M54\",\"M55\",\"M56\",\"M57\",\"M58\",\"M59\",\"M60\",\"M61\",\"M62\",\"M63\",\"M64\",\"M65\",\"M66\",\"M67\",\"M68\",\"M69\",\"M70\",\"M71\",\"M72\",\"M73\",\"M74\",\"M75\",\"M76\",\"M77\",\"M78\",\"M79\",\"M80\",\"M81\",\"M82\",\"M83\",\"M84\",\"M85\",\"M86\",\"M87\",\"M88\",\"M89\",\"M90\",\"M91\",\"M92\",\"M93\",\"M94\",\"M95\",\"M96\",\"M97\",\"M98\",\"M99\",\"M100\",\"M101\",\"M102\",\"M103\",\"M104\",\"M105\",\"M106\",\"M107\",\"M108\",\"M109\",\"M110\",\"M111\",\"M112\",\"M113\",\"M114\",\"M115\",\"M116\",\"M117\",\"M118\",\"M119\",\"M120\",\"M121\",\"M122\",\"M123\",\"M124\",\"M125\",\"M126\",\"M127\",\"M128\",\"M129\",\"M130\",\"M131\",\"M132\",\"M133\",\"M134\",\"M135\",\"M136\",\"M137\",\"M138\",\"M139\",\"M140\",\"M141\",\"M142\",\"M143\",\"M144\",\"M145\",\"M146\",\"M147\",\"M148\",\"M149\"],[\"1_3-Dimethylurate\",\"1_6-Anhydro-β-D-glucose\",\"1_7-Dimethylxanthine\",\"1-Methylnicotinamide\",\"2-Aminoadipate\",\"2-Aminobutyrate\",\"2-Furoylglycine\",\"2-Hydroxyisobutyrate\",\"2-Hydroxyphenylacetate\",\"2-Oxoglutarate\",\"3-Aminoisobutyrate\",\"3-Hydroxy-3-methylglutarate\",\"3-Hydroxybutyrate\",\"3-Hydroxyisobutyrate\",\"3-Hydroxyisovalerate\",\"3-Hydroxymandelate\",\"3-Hydroxyphenylacetate\",\"3-Indoxylsulfate\",\"4-Aminohippurate\",\"4-Hydroxy-3-methoxymandelate\",\"4-Hydroxyphenylacetate\",\"4-Hydroxyphenyllactate\",\"5-Aminolevulinate\",\"5-Hydroxytryptophan\",\"6-Hydroxynicotinate\",\"ATP\",\"Acetaminophen\",\"Acetate\",\"Acetoacetate\",\"Acetone\",\"Adipate\",\"Alanine\",\"Anserine\",\"Arginine\",\"Ascorbate\",\"Asparagine\",\"Azelate\",\"Betaine\",\"Butanone\",\"Caffeine\",\"Carnitine\",\"Carnosine\",\"Chlorogenate\",\"Choline\",\"Citrate\",\"Creatine\",\"Creatine phosphate\",\"Creatinine\",\"Dimethylamine\",\"Ethanol\",\"Ethanolamine\",\"Formate\",\"Fructose\",\"Fumarate\",\"Gabapentin\",\"Galactarate\",\"Galactose\",\"Glucitol\",\"Gluconate\",\"Glucose\",\"Glucose-6-phosphate\",\"Glutamine\",\"Glycine\",\"Glycolate\",\"Glycylproline\",\"Hippurate\",\"Histamine\",\"Histidine\",\"Homovanillate\",\"Hypoxanthine\",\"Ibuprofen\",\"Indole-3-acetate\",\"Indole-3-lactate\",\"Isoleucine\",\"Lactate\",\"Lactose\",\"Lactulose\",\"Leucine\",\"Lysine\",\"Malonate\",\"Maltose\",\"Mandelate\",\"Mannitol\",\"Methanol\",\"Methionine\",\"Methylguanidine\",\"N_N-Dimethylglycine\",\"N-Acetylglutamine\",\"N-AcetylglutamineDerivative\",\"N-Acetylornithine\",\"N-Acetylserotonin\",\"N-Acetyltyrosine\",\"N-Methylhydantoin\",\"N-Phenylacetylglycine\",\"N-Phenylacetylphenylalanine\",\"Nicotinate\",\"Nicotinic acid adenine dinucleotide\",\"O-Acetylcarnitine\",\"O-Phosphocholine\",\"Oxypurinol\",\"Pantothenate\",\"Phenylacetate\",\"Phenylalanine\",\"Proline\",\"Propylene glycol\",\"Pyridoxine\",\"Pyroglutamate\",\"Pyruvate\",\"Sarcosine\",\"Serotonin\",\"Succinate\",\"Sucrose\",\"Taurine\",\"Threonine\",\"Trigonelline\",\"Trimethylamine\",\"Trimethylamine N-oxide\",\"Tropate\",\"Tryptophan\",\"Tyrosine\",\"Urocanate\",\"Valine\",\"Xanthine\",\"Xylose\",\"cis-Aconitate\",\"trans-Aconitate\",\"u072\",\"u075\",\"u11\",\"u1125\",\"u122\",\"u122triplet\",\"u14\",\"u144\",\"u14doublet\",\"u185\",\"u217\",\"u233\",\"u361\",\"u362\",\"u380large\",\"u43\",\"u433\",\"u87\",\"uarm1\",\"uarm2\",\"β-Alanine\",\"π-Methylhistidine\",\"τ-Methylhistidine\"],[72.87647058823529,529.0368421052632,117.1105263157895,62.89473684210526,227.9,71.05555555555556,73.94444444444444,80.62105263157895,48.09230769230769,145.4444444444445,193.521052631579,73.88421052631578,747.6315789473684,75.00526315789473,68.48947368421052,112.4222222222222,31.08125,134.3105263157895,51.23529411764706,41.62222222222222,51.95,48.6,611.3,88.64285714285714,23.53684210526316,25.74444444444444,98.38823529411765,31.34666666666667,382.4578947368421,119.0157894736842,76.08421052631579,125.1578947368421,448.0157894736842,142.5666666666667,780.0777777777778,51.35333333333333,92.53684210526316,246.0052631578947,92.28333333333333,70.3,87.03749999999999,159.2888888888889,21.91052631578948,52.36666666666667,5102.910526315789,443.0833333333333,357.35,12960.25789473684,402.9,231.4473684210526,448.29375,156.4947368421053,854.421052631579,12.26470588235294,187.525,124.5333333333333,524.0842105263158,753.3210526315789,422.6055555555556,480.8947368421053,725.1944444444445,402.864705882353,682.6894736842105,330.3,592.9421052631579,1569.868421052631,195.021052631579,233.7333333333333,63.06470588235294,134.2368421052632,54.82631578947368,106.3705882352941,102.4578947368421,36.25555555555555,153.2894736842105,572.0894736842105,405.9222222222222,33.41764705882353,73.72142857142858,358.078947368421,757.9473684210526,48.5,840.1315789473684,137.8947368421053,57.88421052631579,156.9684210526316,47.71578947368421,209.1736842105263,467.2894736842105,117.2315789473684,76.93684210526315,23.81176470588235,84.36842105263158,227.8684210526316,62.25833333333333,11.9125,17.84705882352941,78.38333333333333,54.8235294117647,303.2166666666667,55.85294117647059,145.8357142857143,184.135294117647,326.5888888888889,264.9411764705882,80.63157894736842,395.5315789473684,42.29473684210527,76.34210526315789,69.06,82.38947368421053,270.2947368421053,208.2357142857143,187.7736842105263,234.9736842105263,26.88421052631579,208.8,155.6263157894737,96.17894736842105,121.9823529411765,19.16428571428571,29.77368421052632,190.4,607.7578947368421,368.5684210526316,40.7,200.375,784.1588235294117,2094.221052631579,54.29375,2499.421052631579,191.1368421052632,149.9052631578948,723.1578947368421,1473.805263157895,369.9666666666666,1450.022222222222,443.2263157894737,367.3666666666667,390.8411764705883,398.3947368421053,13.47368421052632,650.3631578947369,27.9421052631579,397.2916666666667,292.2647058823529,245.8157894736842,330.7833333333334,202.3],[\"43.29 102.47\",\"388.06 670.01\",\"64.5 169.72\",\"46.44 79.35\",\"129.03 326.77\",\"41.71 100.4\",\"30.58 117.31\",\"64.31 96.93\",\"17.56 78.63\",\"93.69 197.19\",\"72.37 314.68\",\"56.57 91.2\",\"-338.61 1833.87\",\"57.28 92.73\",\"49.55 87.43\",\"44.99 179.86\",\"19.91 42.26\",\"91.62 177\",\"35.06 67.41\",\"25.15 58.1\",\"28.76 75.14\",\"29 68.2\",\"435.56 787.04\",\"35.36 141.93\",\"16.44 30.63\",\"18.89 32.6\",\"-20.12 216.9\",\"14.24 48.45\",\"0.14 764.78\",\"10.21 227.82\",\"27.67 124.5\",\"96.85 153.46\",\"344.9 551.13\",\"92.21 192.92\",\"299.89 1260.26\",\"23.83 78.87\",\"68.42 116.65\",\"97.2 394.81\",\"59.46 125.11\",\"51.74 88.86\",\"39.62 134.45\",\"111.64 206.94\",\"15.97 27.85\",\"36.33 68.4\",\"3640.96 6564.86\",\"52.99 833.18\",\"142.74 571.96\",\"10313.48 15607.04\",\"312.18 493.62\",\"153.82 309.08\",\"303.89 592.69\",\"113.26 199.72\",\"577.27 1131.58\",\"6.87 17.66\",\"107.73 267.32\",\"83.55 165.52\",\"306.37 741.8\",\"295.82 1210.82\",\"282.74 562.48\",\"293.86 667.93\",\"440.56 1009.83\",\"232.49 573.24\",\"421.41 943.97\",\"186.96 473.64\",\"420.76 765.13\",\"571.32 2568.42\",\"118.82 271.22\",\"127.64 339.83\",\"46.47 79.66\",\"68.78 199.69\",\"39.14 70.51\",\"67.72 145.02\",\"77.3 127.62\",\"24.96 47.55\",\"112.12 194.45\",\"314.46 829.72\",\"296.46 515.39\",\"24.62 42.21\",\"23.15 124.29\",\"169.04 547.12\",\"482.98 1032.91\",\"-11.59 108.59\",\"-51.05 1731.32\",\"81.92 193.87\",\"37.58 78.19\",\"60.72 253.22\",\"28.45 66.98\",\"156.71 261.64\",\"352.33 582.24\",\"70.8 163.66\",\"54.53 99.34\",\"12.31 35.31\",\"65.78 102.96\",\"153.13 302.61\",\"40.3 84.22\",\"7.98 15.84\",\"8.74 26.96\",\"43.27 113.5\",\"33.75 75.9\",\"66.41 540.03\",\"34.8 76.9\",\"90.11 201.56\",\"96.45 271.82\",\"230.24 422.94\",\"52.68 477.21\",\"47.35 113.92\",\"299.05 492.02\",\"28.88 55.71\",\"40.29 112.39\",\"19.46 118.66\",\"39.33 125.45\",\"193.34 347.25\",\"65.57 350.9\",\"135.84 239.71\",\"67.97 401.97\",\"19.18 34.59\",\"111.14 306.46\",\"111.39 199.86\",\"67.93 124.43\",\"19.21 224.76\",\"11.22 27.1\",\"22.62 36.92\",\"115.82 264.98\",\"364.88 850.64\",\"262.55 474.59\",\"30.87 50.53\",\"123.56 277.19\",\"216.21 1352.11\",\"1721.72 2466.73\",\"12.16 96.43\",\"1647.96 3350.88\",\"115.72 266.56\",\"48.6 251.21\",\"552.82 893.5\",\"1146.9 1800.71\",\"-280.86 1020.79\",\"68.09 2831.96\",\"179.12 707.33\",\"-267.92 1002.65\",\"-167.24 948.93\",\"-70.72 867.51\",\"4.46 22.49\",\"0.96 1299.76\",\"26.4 29.48\",\"-367.86 1162.44\",\"-258.9 843.43\",\"187.93 303.7\",\"59.93 601.63\",\"158.4 246.2\"],[173.2222222222222,1691.95,163.77,26.325,219.2095238095238,34.345,97.38571428571429,58.06666666666667,88.67368421052632,88.14999999999999,297.0421052631579,70.61428571428571,325.4190476190476,59.55263157894737,69.44285714285714,139.8222222222222,44.47222222222222,287.4857142857143,77.63500000000001,72.38421052631578,116.3357142857143,76.675,485.9095238095238,148.5,26.54761904761905,43.45,78.48888888888889,901.3190476190476,267.3142857142857,117.5142857142857,102.9428571428571,246.4714285714286,402.4095238095238,97.13157894736842,658.8764705882353,42.395,93.76190476190476,277.7052631578947,43.56666666666666,60.46666666666667,121.6444444444444,127.2476190476191,15.5578947368421,71.55714285714285,2026.261904761905,422.4476190476191,262.4470588235294,8280.485714285714,304.5523809523809,441.6428571428572,365.025,356.5095238095238,1042.890476190476,10.5,174.3285714285714,96.13,1318.633333333333,876.9809523809523,854.3285714285714,1026.238095238095,996.1476190476191,452.3333333333333,1534.355,456.57,586.0380952380953,2209.519047619048,184.5285714285714,181.05,99.50952380952381,32.55238095238095,47.62380952380953,174.825,106.9190476190476,29.58,159.8714285714286,671.3714285714286,385.6,23.90526315789474,59.20666666666666,1796.857142857143,904.5142857142857,74.18888888888888,1245.62380952381,137.8052631578947,45.7578947368421,75.17619047619047,32.095,186.8523809523809,1101.966666666667,89.04761904761905,84.46666666666667,35.5875,77.17142857142858,785.7333333333333,69.74705882352941,10.67058823529412,9.890000000000001,127.6380952380952,77.38500000000001,446.1555555555555,37.99047619047619,209.0722222222222,403.8736842105263,344.8857142857143,134.3,73.04285714285714,370.7333333333333,118.8190476190476,158.0380952380953,86.83499999999999,383.0142857142857,335.9095238095238,471.4823529411764,158.9095238095238,170.0428571428571,44.43,323.6095238095238,376.615,108.7333333333333,109.1,25.16111111111111,25.84285714285714,171.3823529411765,513.035,278.3809523809524,52.15238095238095,78.87333333333333,279.3722222222222,1646.080952380952,110.95,1562.838095238095,158.8095238095238,82.42380952380952,2217.509523809524,5010.990476190476,293.9,1224.385714285714,1519.328571428571,642.95,536.9761904761905,453.9904761904762,17.53333333333333,748.0904761904761,39.18095238095238,367.7222222222222,119.4142857142857,125.99,286.9904761904762,149.7285714285714],[\"78.78 267.66\",\"-843.35 4227.25\",\"101.79 225.75\",\"18.41 34.24\",\"138.7 299.72\",\"16.92 51.77\",\"45.61 149.16\",\"38.01 78.12\",\"27.45 149.89\",\"34.49 141.81\",\"109.79 484.29\",\"44.51 96.72\",\"17.75 633.09\",\"41.44 77.67\",\"47.78 91.11\",\"64.34 215.31\",\"23.56 65.38\",\"185.88 389.09\",\"51.7 103.57\",\"38.53 106.24\",\"47.15 185.52\",\"39.34 114.01\",\"378.34 593.48\",\"87.6 209.4\",\"16.9 36.19\",\"4.65 82.25\",\"34.22 122.76\",\"-477.62 2280.26\",\"51.84 482.79\",\"57.71 177.32\",\"-18.9 224.78\",\"177.74 315.2\",\"298.45 506.37\",\"51.19 143.08\",\"-89 1406.75\",\"25.8 58.99\",\"53.44 134.08\",\"145.41 410\",\"29.52 57.61\",\"41.88 79.06\",\"42.83 200.45\",\"91.71 162.78\",\"10.59 20.53\",\"45.22 97.89\",\"1381.74 2670.79\",\"160.01 684.89\",\"72.71 452.19\",\"6561.95 9999.02\",\"188.45 420.65\",\"79.97 803.32\",\"285.41 444.64\",\"59.97 653.04\",\"504.12 1581.66\",\"5.89 15.11\",\"106.69 241.97\",\"58.49 133.77\",\"-145.29 2782.56\",\"283.22 1470.75\",\"-94.75 1803.41\",\"-85.68 2138.16\",\"617.23 1375.07\",\"326.06 578.61\",\"83.33 2985.38\",\"-31.61 944.75\",\"355 817.08\",\"689.05 3729.99\",\"119.1 249.96\",\"128.94 233.16\",\"46.92 152.1\",\"24.59 40.51\",\"25.64 69.61\",\"101.63 248.02\",\"76.76 137.08\",\"18.31 40.85\",\"118.63 201.11\",\"348.05 994.7\",\"256.33 514.87\",\"8.94 38.87\",\"18.55 99.86\",\"-778.56 4372.27\",\"582.15 1226.88\",\"28.31 120.07\",\"337.57 2153.68\",\"46.66 228.95\",\"26.23 65.28\",\"53.14 97.22\",\"24.42 39.77\",\"134.41 239.29\",\"688.3 1515.63\",\"48.72 129.37\",\"55.15 113.78\",\"13.9 57.28\",\"57.21 97.13\",\"483.85 1087.61\",\"39.4 100.09\",\"8.08 13.26\",\"7.32 12.46\",\"10.06 245.21\",\"44.08 110.69\",\"143.55 748.76\",\"22.68 53.3\",\"136.27 281.88\",\"210.68 597.07\",\"250.28 439.49\",\"31.51 237.09\",\"45.3 100.79\",\"263.74 477.73\",\"-7.68 245.31\",\"82.73 233.34\",\"56.72 116.95\",\"-205.23 971.26\",\"241.14 430.68\",\"230.46 712.51\",\"120.07 197.75\",\"89.94 250.15\",\"16.33 72.53\",\"189.24 457.98\",\"203.15 550.08\",\"76.88 140.59\",\"75.74 142.46\",\"2.34 47.98\",\"19.07 32.61\",\"100.14 242.62\",\"375.32 650.75\",\"182.18 374.58\",\"36.86 67.44\",\"23.14 134.61\",\"155.08 403.67\",\"1097.87 2194.29\",\"-2.03 223.93\",\"1149.5 1976.17\",\"74.46 243.16\",\"51.69 113.15\",\"1262.91 3172.11\",\"1124.24 8897.74\",\"4.01 583.79\",\"200.45 2248.32\",\"940.4 2098.26\",\"-29.27 1315.17\",\"-128.61 1202.56\",\"-108.41 1016.4\",\"11.49 23.58\",\"104.25 1391.93\",\"23.96 54.4\",\"-224.26 959.7\",\"-17.88 256.71\",\"93.46 158.52\",\"200.2 373.78\",\"122.55 176.91\"],[1.987276518191904,0.8976414959229729,1.124899531257731,-3.925512764780811,-0.1335913080790505,-2.108580616108513,0.6803181119638384,-1.710080936436919,1.162649308300838,-1.506388673069697,0.9097692037907463,-0.2046113592496241,-0.7329989501579977,-1.194916676107364,0.06492996547443203,0.5305668391410452,1.106920408281298,2.724168590021666,1.692830605178499,1.601284562730695,1.729563642176251,1.304986865208654,-1.192722851798903,1.449869546739491,0.4927299859752589,0.8808024181944165,-0.3082947549508381,1.236466780257006,-0.5142436118762119,-0.02370262905261229,0.4015197381232218,3.198931673268506,-0.6104596501667378,-1.306364398207871,-0.2672881322409555,-0.5463684400972156,0.05110901700469654,0.3120535675133216,-2.674179239677409,-0.7337013869950547,0.737481543458133,-1.056535844424567,-1.607506814382269,1.219863674744123,-3.774267230638206,-0.0860261631786552,-0.6493431789199088,-2.906545169362285,-1.308260846477187,1.113724317387772,-0.9897785740818698,1.308205910660163,0.6096955854079066,-0.4875749240033083,-0.2472610470961424,-1.000435463215764,1.052221233447729,0.3233480932800908,0.8820462582461095,0.9479694170270087,1.120591606475679,0.4572086852256961,1.132194558792879,0.4864302313284343,-0.04696161827208616,0.6892149657392278,-0.2047623862927791,-0.8735731423012443,1.295335509647675,-3.022638294200191,-0.5226475641993901,1.620900703877765,0.2226125292100515,-0.8201664812191763,0.2213979402189528,0.47069454859424,-0.2351413292892954,-1.073999832789797,-0.438456270111247,1.092032431518767,0.6779947287552134,0.6659862308731811,0.6246622257459296,-0.001639518360828859,-0.8438051750982771,-1.623563035957912,-1.476552686409001,-0.5897746478722425,2.897398965810784,-0.89829717722515,0.400000565037653,0.9402018875931727,-0.5171891597477429,3.515887155149962,0.3918852962940869,-0.5173704843100281,-1.648036319493151,0.7867619842367048,1.12202395037052,0.7291062718004202,-1.344926340062666,1.351848785283455,2.030001504858795,0.2655849344569119,-1.08570962660531,-0.3432611488139289,-0.3373568990930365,1.179103225566159,1.917877172356531,0.6004434166314101,0.9989882448194953,1.053470591161924,1.84217636718893,-0.8723763349997431,-0.6871011620919579,1.180428932946575,1.354702322034479,2.41950133293013,0.5779880116072617,-0.2336749375933968,0.4865044379575598,-0.782504708808022,-0.3614149199688271,-0.6649449844673743,-1.234760050505884,1.234994418135542,-2.509409469982705,-1.70174369775787,-1.325225281497405,0.9209068687207493,-1.939493945161672,-0.5599801459583423,-1.24935973671077,3.020507037502167,1.777446667090662,-0.2092593204780102,-0.2571295592770997,3.314587072572185,0.5839920872859252,0.32975493018766,0.1487873203173881,0.7329845953241499,0.2094618875851635,1.439670712621921,-0.05990807732220318,-0.596445068693832,-3.537148231355291,-0.3017897107845461,-1.995603163387195],[0.06055674399968791,0.3805426841301907,0.2680082751782048,0.0005782505797620193,0.8944766078941985,0.0440607904454191,0.5005759001267345,0.09559192940643436,0.2556606393050375,0.1412148835963327,0.3700037112082606,0.8390911237046783,0.4717076303873086,0.2399361872642616,0.9485723804798801,0.5992109434036378,0.278574615213622,0.01121380937370823,0.1004919633523583,0.1213994323356911,0.1032950353373388,0.2049818707323262,0.2422651904673563,0.1568560628538011,0.6252083698422435,0.3899962372555664,0.7609836446544936,0.2306050182283688,0.6110259096397901,0.9812567268920013,0.6913072399653097,0.003558175447406742,0.5451985550228697,0.2011799766957034,0.791240933459804,0.5899149019500106,0.9595536053968634,0.7568246761256459,0.01350902986385827,0.4676453298643993,0.4670855802780054,0.298491385525478,0.1169495163206767,0.2313362813496584,0.0008901589701079415,0.9320069447430135,0.5206489088921999,0.006652359073403634,0.1989231101201199,0.2775083878779452,0.3322511298653478,0.2050437092512659,0.5467037369354244,0.6291869575257574,0.806288916999279,0.323908628966354,0.3047218203784631,0.7482769007140309,0.3877998937226039,0.353862061690377,0.2699640366974668,0.6507154834061499,0.2707949501457092,0.631425124773271,0.9628031256857099,0.4953712253597914,0.8388959742834324,0.3906996092840762,0.2075849164078071,0.007143492437660543,0.6044788398896684,0.1160738122165124,0.8250484432029385,0.4175368488265344,0.8259711004458943,0.6406278853808569,0.8154047207627547,0.291763654715727,0.6647642255952484,0.2876631060823736,0.5019281064406877,0.5117051621329328,0.5359299858677059,0.9987027494348791,0.4043589770209401,0.1202139444252588,0.1530167089027781,0.5588423424801452,0.008108328566699383,0.3748930706214904,0.6914943657492223,0.3569179296792716,0.6080226966925915,0.001906482226508431,0.698270591526669,0.6092346382265005,0.1161818075410724,0.4392817316414943,0.2703848307482611,0.471216338097071,0.188544762339459,0.186695190974121,0.05313148613519664,0.7920477126788928,0.288686951917676,0.7333961915790232,0.7377089952806344,0.2518943890993501,0.06517881283537982,0.5538771441863868,0.3296095887732821,0.2989325642836717,0.07717917445506492,0.3890953019626429,0.4981030721770863,0.2505309481453317,0.1840347821834958,0.02449234313927563,0.5666970783008185,0.8176893491799964,0.6316566941531669,0.438823117042825,0.720025983837929,0.5114066248994078,0.2246693763421459,0.2254069711581902,0.0184079328041381,0.1064696239411817,0.1937942671682404,0.3662398944255398,0.06329011465392596,0.5787907358281177,0.2250872139430605,0.006447163195872393,0.0904939914298051,0.8364400132755436,0.798701176991278,0.002555021190606215,0.5632331620585775,0.7435039928417411,0.8825208938706292,0.4689055428017509,0.8352107999681188,0.1651237027829208,0.9527504187197313,0.5583086686184568,0.001407595310981188,0.7658545369952304,0.05499981854200865],[0.4855821556235797,0.7368891364978146,0.6852454165887242,0.06631684327304165,0.9385705251847575,0.4376705184244964,0.8111071187000743,0.5835004973554186,0.6852454165887242,0.6575318017454244,0.7368891364978146,0.8930326959428362,0.7986867832694201,0.6852454165887242,0.9759024879399373,0.8255863809545779,0.6852454165887242,0.1518961451529569,0.5835004973554186,0.5835004973554186,0.5835004973554186,0.6852454165887242,0.6852454165887242,0.6852454165887242,0.8255863809545779,0.7368891364978146,0.8915025469710104,0.6852454165887242,0.8255863809545779,0.9878868399115419,0.8658206764423035,0.08836135694393409,0.8197850938526404,0.6852454165887242,0.8930326959428362,0.8255863809545779,0.9759024879399373,0.8915025469710104,0.1677371208095735,0.7986867832694201,0.7986867832694201,0.6852454165887242,0.5835004973554186,0.6852454165887242,0.06631684327304165,0.9711121312357273,0.8165967097361873,0.1182644859123801,0.6852454165887242,0.6852454165887242,0.7174698311585046,0.6852454165887242,0.8197850938526404,0.8255863809545779,0.8930326959428362,0.7174698311585046,0.6879325944907727,0.8915025469710104,0.7368891364978146,0.7368891364978146,0.6852454165887242,0.8358328192027271,0.6852454165887242,0.8255863809545779,0.9759024879399373,0.8111071187000743,0.8930326959428362,0.7368891364978146,0.6852454165887242,0.1182644859123801,0.8255863809545779,0.5835004973554186,0.8930326959428362,0.7680616108043657,0.8930326959428362,0.8300309123630234,0.8930326959428362,0.6852454165887242,0.8465800821683077,0.6852454165887242,0.8111071187000743,0.8111071187000743,0.8197850938526404,0.9987027494348791,0.753118594701501,0.5835004973554186,0.6852454165887242,0.8197850938526404,0.1208140956438208,0.7368891364978146,0.8658206764423035,0.7368891364978146,0.8255863809545779,0.07101646293743906,0.8670193178122807,0.8255863809545779,0.5835004973554186,0.7885900965612367,0.6852454165887242,0.7986867832694201,0.6852454165887242,0.6852454165887242,0.4820572331034876,0.8930326959428362,0.6852454165887242,0.8915025469710104,0.8915025469710104,0.6852454165887242,0.4855821556235797,0.8197850938526404,0.7174698311585046,0.6852454165887242,0.5476046187526035,0.7368891364978146,0.8111071187000743,0.6852454165887242,0.6852454165887242,0.2606685091251478,0.8197850938526404,0.8930326959428362,0.8255863809545779,0.7885900965612367,0.8866435668748051,0.8111071187000743,0.6852454165887242,0.6852454165887242,0.2109832298320444,0.5835004973554186,0.6852454165887242,0.7368891364978146,0.4855821556235797,0.8255863809545779,0.6852454165887242,0.1182644859123801,0.5835004973554186,0.8930326959428362,0.8930326959428362,0.07613963148006522,0.8197850938526404,0.8915025469710104,0.9325930013242819,0.7986867832694201,0.8930326959428362,0.6852454165887242,0.9759024879399373,0.8197850938526404,0.06991056711206567,0.8915025469710104,0.4820572331034876],[5,1,1,5,0,2,1,0,8,4,2,0,0,2,0,4,6,0,3,3,18,8,0,6,0,4,5,4,0,0,0,0,0,6,5,5,0,2,1,0,6,1,2,1,0,1,5,0,0,0,4,0,0,5,3,2,0,0,1,0,1,2,1,3,0,0,0,2,2,0,0,3,0,2,0,0,1,4,11,0,0,9,0,2,2,0,1,0,0,0,0,7,0,0,11,7,3,1,3,4,2,8,4,1,2,0,0,0,0,5,0,0,9,0,0,1,0,1,0,3,8,0,4,1,0,0,9,5,0,4,0,0,0,0,0,11,1,0,5,2,0,0,0,0,10,2,1,1,0],[12.5,2.5,2.5,12.5,0,5,2.5,0,20,10,5,0,0,5,0,10,15,0,7.5,7.5,45,20,0,15,0,10,12.5,10,0,0,0,0,0,15,12.5,12.5,0,5,2.5,0,15,2.5,5,2.5,0,2.5,12.5,0,0,0,10,0,0,12.5,7.5,5,0,0,2.5,0,2.5,5,2.5,7.5,0,0,0,5,5,0,0,7.5,0,5,0,0,2.5,10,27.5,0,0,22.5,0,5,5,0,2.5,0,0,0,0,17.5,0,0,27.5,17.5,7.5,2.5,7.5,10,5,20,10,2.5,5,0,0,0,0,12.5,0,0,22.5,0,0,2.5,0,2.5,0,7.5,20,0,10,2.5,0,0,22.5,12.5,0,10,0,0,0,0,0,27.5,2.5,0,12.5,5,0,0,0,0,25,5,2.5,2.5,0],[10.526,0,0,0,0,5.263,5.263,0,31.579,5.263,0,0,0,0,0,5.263,15.789,0,10.526,5.263,57.895,15.789,0,26.316,0,5.263,10.526,21.053,0,0,0,0,0,21.053,5.263,21.053,0,0,5.263,0,15.789,5.263,0,5.263,0,5.263,5.263,0,0,0,15.789,0,0,10.526,15.789,5.263,0,0,5.263,0,5.263,10.526,0,10.526,0,0,0,5.263,10.526,0,0,10.526,0,5.263,0,0,5.263,10.526,26.316,0,0,31.579,0,0,0,0,0,0,0,0,0,10.526,0,0,36.842,15.789,10.526,5.263,10.526,5.263,10.526,26.316,10.526,5.263,10.526,0,0,0,0,21.053,0,0,26.316,0,0,0,0,0,0,10.526,26.316,0,0,0,0,0,15.789,10.526,0,15.789,0,0,0,0,0,21.053,5.263,0,21.053,10.526,0,0,0,0,36.842,10.526,0,5.263,0],[14.286,4.762,4.762,23.81,0,4.762,0,0,9.523999999999999,14.286,9.523999999999999,0,0,9.523999999999999,0,14.286,14.286,0,4.762,9.523999999999999,33.333,23.81,0,4.762,0,14.286,14.286,0,0,0,0,0,0,9.523999999999999,19.048,4.762,0,9.523999999999999,0,0,14.286,0,9.523999999999999,0,0,0,19.048,0,0,0,4.762,0,0,14.286,0,4.762,0,0,0,0,0,0,4.762,4.762,0,0,0,4.762,0,0,0,4.762,0,4.762,0,0,0,9.523999999999999,28.571,0,0,14.286,0,9.523999999999999,9.523999999999999,0,4.762,0,0,0,0,23.81,0,0,19.048,19.048,4.762,0,4.762,14.286,0,14.286,9.523999999999999,0,0,0,0,0,0,4.762,0,0,19.048,0,0,4.762,0,4.762,0,4.762,14.286,0,19.048,4.762,0,0,28.571,14.286,0,4.762,0,0,0,0,0,33.333,0,0,4.762,0,0,0,0,0,14.286,0,4.762,0,0],[0.6066696590722729,0.2125842485484439,0.8405969587276207,0.9265990629418335,0.8790239108996381,0.7379962955796591,0.6851817704283608,0.9185946955741374,0.5338807107895368,0.8400004992034298,0.679837929320331,0.8837110199384375,0.2566255749128949,0.9428732607746753,0.7738483265428741,0.617321816197369,0.832380409589595,0.794276396874575,0.9026692414197074,0.7589500331397183,0.7882412682814874,0.7771739657823652,0.9271424814367607,0.8032762073294062,0.8306563834206133,0.3592877547734938,0.3808593553447664,0.2194581159728083,0.4229403596819877,0.5662344069703409,0.3578379438174363,0.8805774555315545,0.9603493288617378,0.8807068231932013,0.5870084283532171,0.7911913727632067,0.8369231047072643,0.6821327750005011,0.8367717833072033,0.9182828620233392,0.7034937456126263,0.9101867375815721,0.8791457449532659,0.8817892659515502,0.8951486310735759,0.4924481209118521,0.564670281759122,0.9518067382620891,0.9271357784836279,0.3590726293306373,0.9462264891318692,0.3178895964306289,0.6186001669938337,0.8294335103536947,0.800503215076755,0.8785705569060506,0.2843823758437078,0.5412199848150736,0.2873631924906211,0.3379739853805506,0.839767838739012,0.8465314594713221,0.3414042914888559,0.3481736135391595,0.8090453764632721,0.5436239814007724,0.8447087736148816,0.8661168131672019,0.6163648302877622,0.5828087766874699,0.7720865265612435,0.8203216146661191,0.9406162499831582,0.848340964763418,0.860351824042227,0.7440518312595619,0.9410249128816366,0.7757010856496264,0.7155100046071368,0.2165603352822056,0.8231695364694113,0.6322373637306683,0.4950057513609986,0.7303512092073703,0.8817826886529848,0.4934675983029466,0.6186738807544827,0.9317283880852554,0.6907072789793789,0.8013348637044327,0.8060926206898447,0.7307462884971616,0.9182722410351287,0.74259219271508,0.837244530488825,0.6805418387418258,0.6249094991637281,0.4351562403511342,0.7757898871666258,0.6221273106888754,0.7848245896109867,0.9119353685145694,0.6991878372028071,0.9246527896521537,0.4956293767662435,0.7283738914433364,0.9739544986354278,0.2674559328974381,0.7567545388634658,0.7951028057641638,0.2031037406024661,0.938637181097329,0.7680807218413791,0.9293932342810822,0.6534690764548189,0.573183459269567,0.8103961288678574,0.7156543992946627,0.9174648403403742,0.532595916977072,0.4523483844115065,0.9497893103639899,0.817345358566958,0.8983797735960568,0.8295083058442405,0.9000114372010164,0.8193115323253443,0.4529348265576172,0.899775321452243,0.370423346701285,0.847953587127338,0.6242685690891525,0.5014888896333085,0.668094544530254,0.3660482664996291,0.3620289350955154,0.4549597663061196,0.7617063679067864,0.3881418432833516,0.352756784617606,0.3104475196833684,0.7781933195594761,0.4635039732254833,0.3327963684006087,0.3216329165766594,0.2526915942926315,0.9387838086588812,0.5582238769991379,0.9659899611494926],[1.747181594463167e-08,3.407318739650615e-13,6.491483779084264e-05,0.02219150368232262,0.0004954352345501781,7.124540545672445e-07,7.329695632829958e-08,0.006957915515976277,6.11649070580633e-09,0.000112973391253797,7.939877744809489e-08,0.0006637898200138191,5.639046557400798e-13,0.0519558340720454,2.016558112062657e-06,1.778768378545522e-08,0.0001157952623794794,5.15812121475213e-06,0.003499471704292928,2.14931057176037e-06,0.0003293941134961403,1.56178724685792e-05,0.01300796751978105,2.96703866108077e-05,3.155025120283933e-05,2.210915268571102e-11,5.176492837614529e-11,1.26173117902143e-12,2.336834961208789e-11,1.11374447007889e-09,5.019899335907095e-12,0.0005455713122607828,0.1721662048456563,0.00147406119956061,9.743822104030685e-09,1.377443675601847e-05,4.399031149545923e-05,8.615801295887667e-08,5.296124723888733e-05,0.006803492232975338,5.571222399112635e-07,0.004379696454604714,0.0006914997561963079,0.0006905164178761396,0.001385470197033401,1.920729946514541e-10,5.127749371019489e-09,0.08751158108133715,0.01300148463653212,5.163105792714563e-12,0.07955882629070453,2.060985079524239e-12,5.664240065586423e-09,8.144038926062343e-05,1.333992152566477e-05,0.0006679896122496435,1.004539183028442e-12,5.361044213425351e-10,1.546477062106388e-12,3.209181112209007e-12,6.210047520672998e-05,0.0001080591706543558,4.957605144897466e-12,1.194926338663125e-11,1.051518363989859e-05,5.744536517806831e-10,6.710467012859259e-05,0.0003213002991100758,9.465610400432665e-09,1.836372753427685e-09,1.863983560657801e-06,3.43202443856949e-05,0.03627525428835431,0.0001191545663691872,0.0001620943861231089,5.576172258378762e-07,0.04114995177440627,5.552517982434352e-06,3.538808554039835e-06,2.516505234835792e-13,2.138833446369053e-05,1.338202413205513e-07,1.485846745464947e-10,5.255336483842709e-07,0.0008110754421938936,1.425713353154416e-10,7.590470304624864e-09,0.01834662102069494,6.876031642849675e-08,7.223190856333188e-06,9.097870553308546e-06,1.975214917707576e-06,0.006798296621314181,5.248107599052324e-07,0.0004203139658111176,3.354858782576609e-07,1.670888967770132e-08,4.434731091436713e-11,4.400547614656505e-06,2.06626322296238e-08,5.206902745614785e-06,0.01264041692343429,2.747242881983172e-07,0.01215240719357205,2.904540717957165e-10,2.938063990824203e-07,0.4755905685859462,7.050851473829748e-13,9.536389566868864e-07,1.638123484351698e-05,1.931958185863426e-13,0.03111602740282406,1.396857207653703e-05,0.01538876845076769,1.817034730157162e-08,1.858579181398556e-09,1.123979500119247e-05,2.292977152927886e-07,0.006415312961875416,1.092849039868041e-09,8.142797656024337e-10,0.07457516644560527,3.669878362136975e-05,0.001983170760427131,2.970718237654064e-05,0.001913179093059071,0.0001201044892006747,2.76361919631054e-10,0.001883168190112886,2.828235175517788e-11,8.027216067365155e-05,6.812955646430016e-09,1.770142158726713e-10,3.029975227534833e-08,6.056762213461682e-12,3.690441792069629e-10,7.272567260984723e-11,1.180814165888823e-06,6.09264215459925e-11,9.163307219186475e-12,1.753194758268699e-12,2.452119438139363e-06,6.482053257304294e-11,2.860391820296263e-12,1.078031031609706e-10,1.106510842228423e-12,0.03469569354890339,1.195779792380486e-09,0.266737715040324]],\"container\":\"<table class=\\\"display\\\">\\n  <thead>\\n    <tr>\\n      <th> <\\/th>\\n      <th>Idx<\\/th>\\n      <th>Name<\\/th>\\n      <th>Label<\\/th>\\n      <th>Grp0_Mean<\\/th>\\n      <th>Grp0_Mean_95CI<\\/th>\\n      <th>Grp1_Mean<\\/th>\\n      <th>Grp1_Mean_95CI<\\/th>\\n      <th>TTestStat<\\/th>\\n      <th>TTestPvalue<\\/th>\\n      <th>bhQvalue<\\/th>\\n      <th>TotalMissing<\\/th>\\n      <th>PercTotalMissing<\\/th>\\n      <th>Grp0_Missing<\\/th>\\n      <th>Grp1_Missing<\\/th>\\n      <th>ShapiroW<\\/th>\\n      <th>ShapiroPvalue<\\/th>\\n    <\\/tr>\\n  <\\/thead>\\n<\\/table>\",\"options\":{\"dom\":\"Blfrtip\",\"buttons\":[\"copy\",\"csv\",\"excel\"],\"lengthMenu\":[[10,25,50,-1],[\"10\",\"25\",\"50\",\"All\"]],\"columnDefs\":[{\"className\":\"dt-right\",\"targets\":[1,4,6,8,9,10,11,12,13,14,15,16]},{\"orderable\":false,\"targets\":0},{\"name\":\" \",\"targets\":0},{\"name\":\"Idx\",\"targets\":1},{\"name\":\"Name\",\"targets\":2},{\"name\":\"Label\",\"targets\":3},{\"name\":\"Grp0_Mean\",\"targets\":4},{\"name\":\"Grp0_Mean_95CI\",\"targets\":5},{\"name\":\"Grp1_Mean\",\"targets\":6},{\"name\":\"Grp1_Mean_95CI\",\"targets\":7},{\"name\":\"TTestStat\",\"targets\":8},{\"name\":\"TTestPvalue\",\"targets\":9},{\"name\":\"bhQvalue\",\"targets\":10},{\"name\":\"TotalMissing\",\"targets\":11},{\"name\":\"PercTotalMissing\",\"targets\":12},{\"name\":\"Grp0_Missing\",\"targets\":13},{\"name\":\"Grp1_Missing\",\"targets\":14},{\"name\":\"ShapiroW\",\"targets\":15},{\"name\":\"ShapiroPvalue\",\"targets\":16}],\"order\":[],\"autoWidth\":false,\"orderClasses\":false}},\"evals\":[],\"jsHooks\":[]}"}]
